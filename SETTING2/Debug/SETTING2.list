
SETTING2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002fa4  08002fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fc8  08002fc8  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08002fc8  08002fc8  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fc8  08002fc8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08002fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200000a4  08003074  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08003074  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a186  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f1b  00000000  00000000  0002a253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002cca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001728f  00000000  00000000  0002d6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf61  00000000  00000000  00044937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082628  00000000  00000000  00051898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3ec0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002af4  00000000  00000000  000d3f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f8c 	.word	0x08002f8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08002f8c 	.word	0x08002f8c

0800014c <Khong>:

#include "Component.h"

void Khong(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2180      	movs	r1, #128	; 0x80
 8000154:	4814      	ldr	r0, [pc, #80]	; (80001a8 <Khong+0x5c>)
 8000156:	f001 ff1c 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000160:	4811      	ldr	r0, [pc, #68]	; (80001a8 <Khong+0x5c>)
 8000162:	f001 ff16 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000166:	2200      	movs	r2, #0
 8000168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800016c:	480e      	ldr	r0, [pc, #56]	; (80001a8 <Khong+0x5c>)
 800016e:	f001 ff10 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000172:	2200      	movs	r2, #0
 8000174:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000178:	480b      	ldr	r0, [pc, #44]	; (80001a8 <Khong+0x5c>)
 800017a:	f001 ff0a 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 800017e:	2200      	movs	r2, #0
 8000180:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000184:	4808      	ldr	r0, [pc, #32]	; (80001a8 <Khong+0x5c>)
 8000186:	f001 ff04 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800018a:	2200      	movs	r2, #0
 800018c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000190:	4805      	ldr	r0, [pc, #20]	; (80001a8 <Khong+0x5c>)
 8000192:	f001 fefe 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000196:	2201      	movs	r2, #1
 8000198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800019c:	4802      	ldr	r0, [pc, #8]	; (80001a8 <Khong+0x5c>)
 800019e:	f001 fef8 	bl	8001f92 <HAL_GPIO_WritePin>
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40010c00 	.word	0x40010c00

080001ac <Mot>:

void Mot(void) {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2180      	movs	r1, #128	; 0x80
 80001b4:	4814      	ldr	r0, [pc, #80]	; (8000208 <Mot+0x5c>)
 80001b6:	f001 feec 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001c0:	4811      	ldr	r0, [pc, #68]	; (8000208 <Mot+0x5c>)
 80001c2:	f001 fee6 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001cc:	480e      	ldr	r0, [pc, #56]	; (8000208 <Mot+0x5c>)
 80001ce:	f001 fee0 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 80001d2:	2201      	movs	r2, #1
 80001d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <Mot+0x5c>)
 80001da:	f001 feda 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001e4:	4808      	ldr	r0, [pc, #32]	; (8000208 <Mot+0x5c>)
 80001e6:	f001 fed4 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001f0:	4805      	ldr	r0, [pc, #20]	; (8000208 <Mot+0x5c>)
 80001f2:	f001 fece 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001fc:	4802      	ldr	r0, [pc, #8]	; (8000208 <Mot+0x5c>)
 80001fe:	f001 fec8 	bl	8001f92 <HAL_GPIO_WritePin>
}
 8000202:	bf00      	nop
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40010c00 	.word	0x40010c00

0800020c <Hai>:

void Hai(void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	2180      	movs	r1, #128	; 0x80
 8000214:	4814      	ldr	r0, [pc, #80]	; (8000268 <Hai+0x5c>)
 8000216:	f001 febc 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000220:	4811      	ldr	r0, [pc, #68]	; (8000268 <Hai+0x5c>)
 8000222:	f001 feb6 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	f44f 7100 	mov.w	r1, #512	; 0x200
 800022c:	480e      	ldr	r0, [pc, #56]	; (8000268 <Hai+0x5c>)
 800022e:	f001 feb0 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000238:	480b      	ldr	r0, [pc, #44]	; (8000268 <Hai+0x5c>)
 800023a:	f001 feaa 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000244:	4808      	ldr	r0, [pc, #32]	; (8000268 <Hai+0x5c>)
 8000246:	f001 fea4 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 800024a:	2201      	movs	r2, #1
 800024c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000250:	4805      	ldr	r0, [pc, #20]	; (8000268 <Hai+0x5c>)
 8000252:	f001 fe9e 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <Hai+0x5c>)
 800025e:	f001 fe98 	bl	8001f92 <HAL_GPIO_WritePin>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40010c00 	.word	0x40010c00

0800026c <Ba>:

void Ba(void) {
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000270:	2200      	movs	r2, #0
 8000272:	2180      	movs	r1, #128	; 0x80
 8000274:	4814      	ldr	r0, [pc, #80]	; (80002c8 <Ba+0x5c>)
 8000276:	f001 fe8c 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000280:	4811      	ldr	r0, [pc, #68]	; (80002c8 <Ba+0x5c>)
 8000282:	f001 fe86 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000286:	2200      	movs	r2, #0
 8000288:	f44f 7100 	mov.w	r1, #512	; 0x200
 800028c:	480e      	ldr	r0, [pc, #56]	; (80002c8 <Ba+0x5c>)
 800028e:	f001 fe80 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000298:	480b      	ldr	r0, [pc, #44]	; (80002c8 <Ba+0x5c>)
 800029a:	f001 fe7a 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002a4:	4808      	ldr	r0, [pc, #32]	; (80002c8 <Ba+0x5c>)
 80002a6:	f001 fe74 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80002aa:	2201      	movs	r2, #1
 80002ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b0:	4805      	ldr	r0, [pc, #20]	; (80002c8 <Ba+0x5c>)
 80002b2:	f001 fe6e 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002bc:	4802      	ldr	r0, [pc, #8]	; (80002c8 <Ba+0x5c>)
 80002be:	f001 fe68 	bl	8001f92 <HAL_GPIO_WritePin>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010c00 	.word	0x40010c00

080002cc <Bon>:

void Bon(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2180      	movs	r1, #128	; 0x80
 80002d4:	4814      	ldr	r0, [pc, #80]	; (8000328 <Bon+0x5c>)
 80002d6:	f001 fe5c 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e0:	4811      	ldr	r0, [pc, #68]	; (8000328 <Bon+0x5c>)
 80002e2:	f001 fe56 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ec:	480e      	ldr	r0, [pc, #56]	; (8000328 <Bon+0x5c>)
 80002ee:	f001 fe50 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 80002f2:	2201      	movs	r2, #1
 80002f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f8:	480b      	ldr	r0, [pc, #44]	; (8000328 <Bon+0x5c>)
 80002fa:	f001 fe4a 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000304:	4808      	ldr	r0, [pc, #32]	; (8000328 <Bon+0x5c>)
 8000306:	f001 fe44 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000310:	4805      	ldr	r0, [pc, #20]	; (8000328 <Bon+0x5c>)
 8000312:	f001 fe3e 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000316:	2200      	movs	r2, #0
 8000318:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031c:	4802      	ldr	r0, [pc, #8]	; (8000328 <Bon+0x5c>)
 800031e:	f001 fe38 	bl	8001f92 <HAL_GPIO_WritePin>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40010c00 	.word	0x40010c00

0800032c <Nam>:

void Nam(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2180      	movs	r1, #128	; 0x80
 8000334:	4814      	ldr	r0, [pc, #80]	; (8000388 <Nam+0x5c>)
 8000336:	f001 fe2c 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 800033a:	2201      	movs	r2, #1
 800033c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000340:	4811      	ldr	r0, [pc, #68]	; (8000388 <Nam+0x5c>)
 8000342:	f001 fe26 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034c:	480e      	ldr	r0, [pc, #56]	; (8000388 <Nam+0x5c>)
 800034e:	f001 fe20 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000358:	480b      	ldr	r0, [pc, #44]	; (8000388 <Nam+0x5c>)
 800035a:	f001 fe1a 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000364:	4808      	ldr	r0, [pc, #32]	; (8000388 <Nam+0x5c>)
 8000366:	f001 fe14 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000370:	4805      	ldr	r0, [pc, #20]	; (8000388 <Nam+0x5c>)
 8000372:	f001 fe0e 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037c:	4802      	ldr	r0, [pc, #8]	; (8000388 <Nam+0x5c>)
 800037e:	f001 fe08 	bl	8001f92 <HAL_GPIO_WritePin>
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010c00 	.word	0x40010c00

0800038c <Sau>:

void Sau(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2180      	movs	r1, #128	; 0x80
 8000394:	4814      	ldr	r0, [pc, #80]	; (80003e8 <Sau+0x5c>)
 8000396:	f001 fdfc 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 800039a:	2201      	movs	r2, #1
 800039c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a0:	4811      	ldr	r0, [pc, #68]	; (80003e8 <Sau+0x5c>)
 80003a2:	f001 fdf6 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ac:	480e      	ldr	r0, [pc, #56]	; (80003e8 <Sau+0x5c>)
 80003ae:	f001 fdf0 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b8:	480b      	ldr	r0, [pc, #44]	; (80003e8 <Sau+0x5c>)
 80003ba:	f001 fdea 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c4:	4808      	ldr	r0, [pc, #32]	; (80003e8 <Sau+0x5c>)
 80003c6:	f001 fde4 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d0:	4805      	ldr	r0, [pc, #20]	; (80003e8 <Sau+0x5c>)
 80003d2:	f001 fdde 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003dc:	4802      	ldr	r0, [pc, #8]	; (80003e8 <Sau+0x5c>)
 80003de:	f001 fdd8 	bl	8001f92 <HAL_GPIO_WritePin>
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40010c00 	.word	0x40010c00

080003ec <Bay>:

void Bay(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2180      	movs	r1, #128	; 0x80
 80003f4:	4814      	ldr	r0, [pc, #80]	; (8000448 <Bay+0x5c>)
 80003f6:	f001 fdcc 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <Bay+0x5c>)
 8000402:	f001 fdc6 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	f44f 7100 	mov.w	r1, #512	; 0x200
 800040c:	480e      	ldr	r0, [pc, #56]	; (8000448 <Bay+0x5c>)
 800040e:	f001 fdc0 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <Bay+0x5c>)
 800041a:	f001 fdba 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000424:	4808      	ldr	r0, [pc, #32]	; (8000448 <Bay+0x5c>)
 8000426:	f001 fdb4 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000430:	4805      	ldr	r0, [pc, #20]	; (8000448 <Bay+0x5c>)
 8000432:	f001 fdae 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000436:	2201      	movs	r2, #1
 8000438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043c:	4802      	ldr	r0, [pc, #8]	; (8000448 <Bay+0x5c>)
 800043e:	f001 fda8 	bl	8001f92 <HAL_GPIO_WritePin>
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40010c00 	.word	0x40010c00

0800044c <Tam>:

void Tam(void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2180      	movs	r1, #128	; 0x80
 8000454:	4814      	ldr	r0, [pc, #80]	; (80004a8 <Tam+0x5c>)
 8000456:	f001 fd9c 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000460:	4811      	ldr	r0, [pc, #68]	; (80004a8 <Tam+0x5c>)
 8000462:	f001 fd96 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046c:	480e      	ldr	r0, [pc, #56]	; (80004a8 <Tam+0x5c>)
 800046e:	f001 fd90 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000478:	480b      	ldr	r0, [pc, #44]	; (80004a8 <Tam+0x5c>)
 800047a:	f001 fd8a 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000484:	4808      	ldr	r0, [pc, #32]	; (80004a8 <Tam+0x5c>)
 8000486:	f001 fd84 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <Tam+0x5c>)
 8000492:	f001 fd7e 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <Tam+0x5c>)
 800049e:	f001 fd78 	bl	8001f92 <HAL_GPIO_WritePin>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010c00 	.word	0x40010c00

080004ac <Chin>:

void Chin(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	4814      	ldr	r0, [pc, #80]	; (8000508 <Chin+0x5c>)
 80004b6:	f001 fd6c 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c0:	4811      	ldr	r0, [pc, #68]	; (8000508 <Chin+0x5c>)
 80004c2:	f001 fd66 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004cc:	480e      	ldr	r0, [pc, #56]	; (8000508 <Chin+0x5c>)
 80004ce:	f001 fd60 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <Chin+0x5c>)
 80004da:	f001 fd5a 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <Chin+0x5c>)
 80004e6:	f001 fd54 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <Chin+0x5c>)
 80004f2:	f001 fd4e 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <Chin+0x5c>)
 80004fe:	f001 fd48 	bl	8001f92 <HAL_GPIO_WritePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40010c00 	.word	0x40010c00

0800050c <display7SEG>:

void display7SEG(int num) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b09      	cmp	r3, #9
 8000518:	d834      	bhi.n	8000584 <display7SEG+0x78>
 800051a:	a201      	add	r2, pc, #4	; (adr r2, 8000520 <display7SEG+0x14>)
 800051c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000520:	08000549 	.word	0x08000549
 8000524:	0800054f 	.word	0x0800054f
 8000528:	08000555 	.word	0x08000555
 800052c:	0800055b 	.word	0x0800055b
 8000530:	08000561 	.word	0x08000561
 8000534:	08000567 	.word	0x08000567
 8000538:	0800056d 	.word	0x0800056d
 800053c:	08000573 	.word	0x08000573
 8000540:	08000579 	.word	0x08000579
 8000544:	0800057f 	.word	0x0800057f
    switch(num) {
        case 0: Khong(); break;
 8000548:	f7ff fe00 	bl	800014c <Khong>
 800054c:	e01a      	b.n	8000584 <display7SEG+0x78>
        case 1: Mot(); break;
 800054e:	f7ff fe2d 	bl	80001ac <Mot>
 8000552:	e017      	b.n	8000584 <display7SEG+0x78>
        case 2: Hai(); break;
 8000554:	f7ff fe5a 	bl	800020c <Hai>
 8000558:	e014      	b.n	8000584 <display7SEG+0x78>
        case 3: Ba(); break;
 800055a:	f7ff fe87 	bl	800026c <Ba>
 800055e:	e011      	b.n	8000584 <display7SEG+0x78>
        case 4: Bon(); break;
 8000560:	f7ff feb4 	bl	80002cc <Bon>
 8000564:	e00e      	b.n	8000584 <display7SEG+0x78>
        case 5: Nam(); break;
 8000566:	f7ff fee1 	bl	800032c <Nam>
 800056a:	e00b      	b.n	8000584 <display7SEG+0x78>
        case 6: Sau(); break;
 800056c:	f7ff ff0e 	bl	800038c <Sau>
 8000570:	e008      	b.n	8000584 <display7SEG+0x78>
        case 7: Bay(); break;
 8000572:	f7ff ff3b 	bl	80003ec <Bay>
 8000576:	e005      	b.n	8000584 <display7SEG+0x78>
        case 8: Tam(); break;
 8000578:	f7ff ff68 	bl	800044c <Tam>
 800057c:	e002      	b.n	8000584 <display7SEG+0x78>
        case 9: Chin(); break;
 800057e:	f7ff ff95 	bl	80004ac <Chin>
 8000582:	bf00      	nop
    }
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <Khong_1>:
 *      Author: PC
 */
#include "Component_1.h"


void Khong_1(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2101      	movs	r1, #1
 8000594:	4811      	ldr	r0, [pc, #68]	; (80005dc <Khong_1+0x50>)
 8000596:	f001 fcfc 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2102      	movs	r1, #2
 800059e:	480f      	ldr	r0, [pc, #60]	; (80005dc <Khong_1+0x50>)
 80005a0:	f001 fcf7 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2104      	movs	r1, #4
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <Khong_1+0x50>)
 80005aa:	f001 fcf2 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2108      	movs	r1, #8
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <Khong_1+0x50>)
 80005b4:	f001 fced 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2110      	movs	r1, #16
 80005bc:	4807      	ldr	r0, [pc, #28]	; (80005dc <Khong_1+0x50>)
 80005be:	f001 fce8 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2120      	movs	r1, #32
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <Khong_1+0x50>)
 80005c8:	f001 fce3 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2140      	movs	r1, #64	; 0x40
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <Khong_1+0x50>)
 80005d2:	f001 fcde 	bl	8001f92 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40010c00 	.word	0x40010c00

080005e0 <Mot_1>:

void Mot_1(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2101      	movs	r1, #1
 80005e8:	4811      	ldr	r0, [pc, #68]	; (8000630 <Mot_1+0x50>)
 80005ea:	f001 fcd2 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2102      	movs	r1, #2
 80005f2:	480f      	ldr	r0, [pc, #60]	; (8000630 <Mot_1+0x50>)
 80005f4:	f001 fccd 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2104      	movs	r1, #4
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <Mot_1+0x50>)
 80005fe:	f001 fcc8 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2108      	movs	r1, #8
 8000606:	480a      	ldr	r0, [pc, #40]	; (8000630 <Mot_1+0x50>)
 8000608:	f001 fcc3 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	4807      	ldr	r0, [pc, #28]	; (8000630 <Mot_1+0x50>)
 8000612:	f001 fcbe 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2120      	movs	r1, #32
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <Mot_1+0x50>)
 800061c:	f001 fcb9 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2140      	movs	r1, #64	; 0x40
 8000624:	4802      	ldr	r0, [pc, #8]	; (8000630 <Mot_1+0x50>)
 8000626:	f001 fcb4 	bl	8001f92 <HAL_GPIO_WritePin>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40010c00 	.word	0x40010c00

08000634 <Hai_1>:

void Hai_1(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2101      	movs	r1, #1
 800063c:	4811      	ldr	r0, [pc, #68]	; (8000684 <Hai_1+0x50>)
 800063e:	f001 fca8 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2102      	movs	r1, #2
 8000646:	480f      	ldr	r0, [pc, #60]	; (8000684 <Hai_1+0x50>)
 8000648:	f001 fca3 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2104      	movs	r1, #4
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <Hai_1+0x50>)
 8000652:	f001 fc9e 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2108      	movs	r1, #8
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <Hai_1+0x50>)
 800065c:	f001 fc99 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2110      	movs	r1, #16
 8000664:	4807      	ldr	r0, [pc, #28]	; (8000684 <Hai_1+0x50>)
 8000666:	f001 fc94 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2120      	movs	r1, #32
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <Hai_1+0x50>)
 8000670:	f001 fc8f 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2140      	movs	r1, #64	; 0x40
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <Hai_1+0x50>)
 800067a:	f001 fc8a 	bl	8001f92 <HAL_GPIO_WritePin>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40010c00 	.word	0x40010c00

08000688 <Ba_1>:

void Ba_1(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2101      	movs	r1, #1
 8000690:	4811      	ldr	r0, [pc, #68]	; (80006d8 <Ba_1+0x50>)
 8000692:	f001 fc7e 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2102      	movs	r1, #2
 800069a:	480f      	ldr	r0, [pc, #60]	; (80006d8 <Ba_1+0x50>)
 800069c:	f001 fc79 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2104      	movs	r1, #4
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <Ba_1+0x50>)
 80006a6:	f001 fc74 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2108      	movs	r1, #8
 80006ae:	480a      	ldr	r0, [pc, #40]	; (80006d8 <Ba_1+0x50>)
 80006b0:	f001 fc6f 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2110      	movs	r1, #16
 80006b8:	4807      	ldr	r0, [pc, #28]	; (80006d8 <Ba_1+0x50>)
 80006ba:	f001 fc6a 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2120      	movs	r1, #32
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <Ba_1+0x50>)
 80006c4:	f001 fc65 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2140      	movs	r1, #64	; 0x40
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <Ba_1+0x50>)
 80006ce:	f001 fc60 	bl	8001f92 <HAL_GPIO_WritePin>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40010c00 	.word	0x40010c00

080006dc <Bon_1>:

void Bon_1(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2101      	movs	r1, #1
 80006e4:	4811      	ldr	r0, [pc, #68]	; (800072c <Bon_1+0x50>)
 80006e6:	f001 fc54 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2102      	movs	r1, #2
 80006ee:	480f      	ldr	r0, [pc, #60]	; (800072c <Bon_1+0x50>)
 80006f0:	f001 fc4f 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2104      	movs	r1, #4
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <Bon_1+0x50>)
 80006fa:	f001 fc4a 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	2108      	movs	r1, #8
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <Bon_1+0x50>)
 8000704:	f001 fc45 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2110      	movs	r1, #16
 800070c:	4807      	ldr	r0, [pc, #28]	; (800072c <Bon_1+0x50>)
 800070e:	f001 fc40 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <Bon_1+0x50>)
 8000718:	f001 fc3b 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2140      	movs	r1, #64	; 0x40
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <Bon_1+0x50>)
 8000722:	f001 fc36 	bl	8001f92 <HAL_GPIO_WritePin>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40010c00 	.word	0x40010c00

08000730 <Nam_1>:

void Nam_1(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2101      	movs	r1, #1
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <Nam_1+0x50>)
 800073a:	f001 fc2a 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2102      	movs	r1, #2
 8000742:	480f      	ldr	r0, [pc, #60]	; (8000780 <Nam_1+0x50>)
 8000744:	f001 fc25 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2104      	movs	r1, #4
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <Nam_1+0x50>)
 800074e:	f001 fc20 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2108      	movs	r1, #8
 8000756:	480a      	ldr	r0, [pc, #40]	; (8000780 <Nam_1+0x50>)
 8000758:	f001 fc1b 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2110      	movs	r1, #16
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <Nam_1+0x50>)
 8000762:	f001 fc16 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <Nam_1+0x50>)
 800076c:	f001 fc11 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2140      	movs	r1, #64	; 0x40
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <Nam_1+0x50>)
 8000776:	f001 fc0c 	bl	8001f92 <HAL_GPIO_WritePin>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40010c00 	.word	0x40010c00

08000784 <Sau_1>:

void Sau_1(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2101      	movs	r1, #1
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <Sau_1+0x50>)
 800078e:	f001 fc00 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2102      	movs	r1, #2
 8000796:	480f      	ldr	r0, [pc, #60]	; (80007d4 <Sau_1+0x50>)
 8000798:	f001 fbfb 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2104      	movs	r1, #4
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <Sau_1+0x50>)
 80007a2:	f001 fbf6 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	480a      	ldr	r0, [pc, #40]	; (80007d4 <Sau_1+0x50>)
 80007ac:	f001 fbf1 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2110      	movs	r1, #16
 80007b4:	4807      	ldr	r0, [pc, #28]	; (80007d4 <Sau_1+0x50>)
 80007b6:	f001 fbec 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <Sau_1+0x50>)
 80007c0:	f001 fbe7 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2140      	movs	r1, #64	; 0x40
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <Sau_1+0x50>)
 80007ca:	f001 fbe2 	bl	8001f92 <HAL_GPIO_WritePin>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40010c00 	.word	0x40010c00

080007d8 <Bay_1>:

void Bay_1(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2101      	movs	r1, #1
 80007e0:	4811      	ldr	r0, [pc, #68]	; (8000828 <Bay_1+0x50>)
 80007e2:	f001 fbd6 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2102      	movs	r1, #2
 80007ea:	480f      	ldr	r0, [pc, #60]	; (8000828 <Bay_1+0x50>)
 80007ec:	f001 fbd1 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2104      	movs	r1, #4
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <Bay_1+0x50>)
 80007f6:	f001 fbcc 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2108      	movs	r1, #8
 80007fe:	480a      	ldr	r0, [pc, #40]	; (8000828 <Bay_1+0x50>)
 8000800:	f001 fbc7 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2110      	movs	r1, #16
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <Bay_1+0x50>)
 800080a:	f001 fbc2 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	2120      	movs	r1, #32
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <Bay_1+0x50>)
 8000814:	f001 fbbd 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2140      	movs	r1, #64	; 0x40
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <Bay_1+0x50>)
 800081e:	f001 fbb8 	bl	8001f92 <HAL_GPIO_WritePin>
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40010c00 	.word	0x40010c00

0800082c <Tam_1>:

void Tam_1(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2101      	movs	r1, #1
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <Tam_1+0x50>)
 8000836:	f001 fbac 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2102      	movs	r1, #2
 800083e:	480f      	ldr	r0, [pc, #60]	; (800087c <Tam_1+0x50>)
 8000840:	f001 fba7 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2104      	movs	r1, #4
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <Tam_1+0x50>)
 800084a:	f001 fba2 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	480a      	ldr	r0, [pc, #40]	; (800087c <Tam_1+0x50>)
 8000854:	f001 fb9d 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2110      	movs	r1, #16
 800085c:	4807      	ldr	r0, [pc, #28]	; (800087c <Tam_1+0x50>)
 800085e:	f001 fb98 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2120      	movs	r1, #32
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <Tam_1+0x50>)
 8000868:	f001 fb93 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2140      	movs	r1, #64	; 0x40
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <Tam_1+0x50>)
 8000872:	f001 fb8e 	bl	8001f92 <HAL_GPIO_WritePin>
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40010c00 	.word	0x40010c00

08000880 <Chin_1>:

void Chin_1(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2101      	movs	r1, #1
 8000888:	4811      	ldr	r0, [pc, #68]	; (80008d0 <Chin_1+0x50>)
 800088a:	f001 fb82 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2102      	movs	r1, #2
 8000892:	480f      	ldr	r0, [pc, #60]	; (80008d0 <Chin_1+0x50>)
 8000894:	f001 fb7d 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2104      	movs	r1, #4
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <Chin_1+0x50>)
 800089e:	f001 fb78 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2108      	movs	r1, #8
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <Chin_1+0x50>)
 80008a8:	f001 fb73 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2110      	movs	r1, #16
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <Chin_1+0x50>)
 80008b2:	f001 fb6e 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <Chin_1+0x50>)
 80008bc:	f001 fb69 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2140      	movs	r1, #64	; 0x40
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <Chin_1+0x50>)
 80008c6:	f001 fb64 	bl	8001f92 <HAL_GPIO_WritePin>
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40010c00 	.word	0x40010c00

080008d4 <display7SEG_1>:

void display7SEG_1(int num) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b09      	cmp	r3, #9
 80008e0:	d834      	bhi.n	800094c <display7SEG_1+0x78>
 80008e2:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <display7SEG_1+0x14>)
 80008e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e8:	08000911 	.word	0x08000911
 80008ec:	08000917 	.word	0x08000917
 80008f0:	0800091d 	.word	0x0800091d
 80008f4:	08000923 	.word	0x08000923
 80008f8:	08000929 	.word	0x08000929
 80008fc:	0800092f 	.word	0x0800092f
 8000900:	08000935 	.word	0x08000935
 8000904:	0800093b 	.word	0x0800093b
 8000908:	08000941 	.word	0x08000941
 800090c:	08000947 	.word	0x08000947
    switch(num) {
        case 0: Khong_1(); break;
 8000910:	f7ff fe3c 	bl	800058c <Khong_1>
 8000914:	e01a      	b.n	800094c <display7SEG_1+0x78>
        case 1: Mot_1(); break;
 8000916:	f7ff fe63 	bl	80005e0 <Mot_1>
 800091a:	e017      	b.n	800094c <display7SEG_1+0x78>
        case 2: Hai_1(); break;
 800091c:	f7ff fe8a 	bl	8000634 <Hai_1>
 8000920:	e014      	b.n	800094c <display7SEG_1+0x78>
        case 3: Ba_1(); break;
 8000922:	f7ff feb1 	bl	8000688 <Ba_1>
 8000926:	e011      	b.n	800094c <display7SEG_1+0x78>
        case 4: Bon_1(); break;
 8000928:	f7ff fed8 	bl	80006dc <Bon_1>
 800092c:	e00e      	b.n	800094c <display7SEG_1+0x78>
        case 5: Nam_1(); break;
 800092e:	f7ff feff 	bl	8000730 <Nam_1>
 8000932:	e00b      	b.n	800094c <display7SEG_1+0x78>
        case 6: Sau_1(); break;
 8000934:	f7ff ff26 	bl	8000784 <Sau_1>
 8000938:	e008      	b.n	800094c <display7SEG_1+0x78>
        case 7: Bay_1(); break;
 800093a:	f7ff ff4d 	bl	80007d8 <Bay_1>
 800093e:	e005      	b.n	800094c <display7SEG_1+0x78>
        case 8: Tam_1(); break;
 8000940:	f7ff ff74 	bl	800082c <Tam_1>
 8000944:	e002      	b.n	800094c <display7SEG_1+0x78>
        case 9: Chin_1(); break;
 8000946:	f7ff ff9b 	bl	8000880 <Chin_1>
 800094a:	bf00      	nop
    }
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <subKeyProcess>:
int KeyReg2[ARRAY_SIZE] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int KeyReg3[ARRAY_SIZE] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimerForKeyPress[ARRAY_SIZE] = {200, 200, 200, 200};

void subKeyProcess(int i){
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	for(int j = 0; j < ARRAY_SIZE; j++){
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	e007      	b.n	8000972 <subKeyProcess+0x1e>
		button_flag[j] = 0;
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <subKeyProcess+0x38>)
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2100      	movs	r1, #0
 8000968:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int j = 0; j < ARRAY_SIZE; j++){
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3301      	adds	r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2b03      	cmp	r3, #3
 8000976:	ddf4      	ble.n	8000962 <subKeyProcess+0xe>
	}
	button_flag[i] = 1;
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <subKeyProcess+0x38>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2101      	movs	r1, #1
 800097e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	200000c0 	.word	0x200000c0

08000990 <getKeyInput>:

void getKeyInput(){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	KeyReg0[0] = KeyReg1[0];
 8000996:	4b50      	ldr	r3, [pc, #320]	; (8000ad8 <getKeyInput+0x148>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a50      	ldr	r2, [pc, #320]	; (8000adc <getKeyInput+0x14c>)
 800099c:	6013      	str	r3, [r2, #0]
	KeyReg1[0] = KeyReg2[0];
 800099e:	4b50      	ldr	r3, [pc, #320]	; (8000ae0 <getKeyInput+0x150>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a4d      	ldr	r2, [pc, #308]	; (8000ad8 <getKeyInput+0x148>)
 80009a4:	6013      	str	r3, [r2, #0]
	KeyReg2[0] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80009a6:	2101      	movs	r1, #1
 80009a8:	484e      	ldr	r0, [pc, #312]	; (8000ae4 <getKeyInput+0x154>)
 80009aa:	f001 fadb 	bl	8001f64 <HAL_GPIO_ReadPin>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b4b      	ldr	r3, [pc, #300]	; (8000ae0 <getKeyInput+0x150>)
 80009b4:	601a      	str	r2, [r3, #0]

	KeyReg0[1] = KeyReg1[1];
 80009b6:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <getKeyInput+0x148>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	4a48      	ldr	r2, [pc, #288]	; (8000adc <getKeyInput+0x14c>)
 80009bc:	6053      	str	r3, [r2, #4]
	KeyReg1[1] = KeyReg2[1];
 80009be:	4b48      	ldr	r3, [pc, #288]	; (8000ae0 <getKeyInput+0x150>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	4a45      	ldr	r2, [pc, #276]	; (8000ad8 <getKeyInput+0x148>)
 80009c4:	6053      	str	r3, [r2, #4]
	KeyReg2[1] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80009c6:	2102      	movs	r1, #2
 80009c8:	4846      	ldr	r0, [pc, #280]	; (8000ae4 <getKeyInput+0x154>)
 80009ca:	f001 facb 	bl	8001f64 <HAL_GPIO_ReadPin>
 80009ce:	4603      	mov	r3, r0
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b43      	ldr	r3, [pc, #268]	; (8000ae0 <getKeyInput+0x150>)
 80009d4:	605a      	str	r2, [r3, #4]

	KeyReg0[2] = KeyReg1[2];
 80009d6:	4b40      	ldr	r3, [pc, #256]	; (8000ad8 <getKeyInput+0x148>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	4a40      	ldr	r2, [pc, #256]	; (8000adc <getKeyInput+0x14c>)
 80009dc:	6093      	str	r3, [r2, #8]
	KeyReg1[2] = KeyReg2[2];
 80009de:	4b40      	ldr	r3, [pc, #256]	; (8000ae0 <getKeyInput+0x150>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	4a3d      	ldr	r2, [pc, #244]	; (8000ad8 <getKeyInput+0x148>)
 80009e4:	6093      	str	r3, [r2, #8]
	KeyReg2[2] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80009e6:	2104      	movs	r1, #4
 80009e8:	483e      	ldr	r0, [pc, #248]	; (8000ae4 <getKeyInput+0x154>)
 80009ea:	f001 fabb 	bl	8001f64 <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <getKeyInput+0x150>)
 80009f4:	609a      	str	r2, [r3, #8]

	KeyReg0[3] = KeyReg1[3];
 80009f6:	4b38      	ldr	r3, [pc, #224]	; (8000ad8 <getKeyInput+0x148>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	4a38      	ldr	r2, [pc, #224]	; (8000adc <getKeyInput+0x14c>)
 80009fc:	60d3      	str	r3, [r2, #12]
	KeyReg1[3] = KeyReg2[3];
 80009fe:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <getKeyInput+0x150>)
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	4a35      	ldr	r2, [pc, #212]	; (8000ad8 <getKeyInput+0x148>)
 8000a04:	60d3      	str	r3, [r2, #12]
	KeyReg2[3] = HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 8000a06:	2108      	movs	r1, #8
 8000a08:	4836      	ldr	r0, [pc, #216]	; (8000ae4 <getKeyInput+0x154>)
 8000a0a:	f001 faab 	bl	8001f64 <HAL_GPIO_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b33      	ldr	r3, [pc, #204]	; (8000ae0 <getKeyInput+0x150>)
 8000a14:	60da      	str	r2, [r3, #12]

	for(int i = 0; i < ARRAY_SIZE; i++){
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	e054      	b.n	8000ac6 <getKeyInput+0x136>
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000a1c:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <getKeyInput+0x14c>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a24:	492c      	ldr	r1, [pc, #176]	; (8000ad8 <getKeyInput+0x148>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d147      	bne.n	8000ac0 <getKeyInput+0x130>
 8000a30:	4a29      	ldr	r2, [pc, #164]	; (8000ad8 <getKeyInput+0x148>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a38:	4929      	ldr	r1, [pc, #164]	; (8000ae0 <getKeyInput+0x150>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d13d      	bne.n	8000ac0 <getKeyInput+0x130>
			if(KeyReg3[i] != KeyReg2[i]){
 8000a44:	4a28      	ldr	r2, [pc, #160]	; (8000ae8 <getKeyInput+0x158>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a4c:	4924      	ldr	r1, [pc, #144]	; (8000ae0 <getKeyInput+0x150>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d016      	beq.n	8000a86 <getKeyInput+0xf6>
				KeyReg3[i] = KeyReg2[i];
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <getKeyInput+0x150>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a60:	4921      	ldr	r1, [pc, #132]	; (8000ae8 <getKeyInput+0x158>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE){
 8000a68:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <getKeyInput+0x150>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d125      	bne.n	8000ac0 <getKeyInput+0x130>
					subKeyProcess(i);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff6d 	bl	8000954 <subKeyProcess>
					TimerForKeyPress[i] = 200;
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <getKeyInput+0x15c>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	21c8      	movs	r1, #200	; 0xc8
 8000a80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a84:	e01c      	b.n	8000ac0 <getKeyInput+0x130>
				}
			}else{
				TimerForKeyPress[i]--;
 8000a86:	4a19      	ldr	r2, [pc, #100]	; (8000aec <getKeyInput+0x15c>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8e:	1e5a      	subs	r2, r3, #1
 8000a90:	4916      	ldr	r1, [pc, #88]	; (8000aec <getKeyInput+0x15c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0){
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <getKeyInput+0x15c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d10d      	bne.n	8000ac0 <getKeyInput+0x130>
					if(KeyReg2[i] == PRESSED_STATE){
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <getKeyInput+0x150>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <getKeyInput+0x126>
						subKeyProcess(i);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff4f 	bl	8000954 <subKeyProcess>
					}
					TimerForKeyPress[i] = 200;
 8000ab6:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <getKeyInput+0x15c>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	21c8      	movs	r1, #200	; 0xc8
 8000abc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < ARRAY_SIZE; i++){
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	dda7      	ble.n	8000a1c <getKeyInput+0x8c>
				}
			}
		}
	}
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000010 	.word	0x20000010
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000020 	.word	0x20000020
 8000ae4:	40010800 	.word	0x40010800
 8000ae8:	20000030 	.word	0x20000030
 8000aec:	20000040 	.word	0x20000040

08000af0 <Reset>:
int i_2 = 5, j_2 = 2, t_2 = 3;
int test = 1, random = 1, dem = 2;
int max_Red = 5, max_Yellow = 2, max_Green = 3, turn = 0;
int prev_max_Red = 5, prev_max_Yellow = 2, prev_max_Green = 3;

void Reset(){
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
	en0 = 1; en1 = 0; en2 = 1; en3 = 0;
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <Reset+0x80>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <Reset+0x84>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <Reset+0x88>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <Reset+0x8c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
	i_1 = max_Red;
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <Reset+0x90>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <Reset+0x94>)
 8000b12:	6013      	str	r3, [r2, #0]
	j_1 = max_Yellow;
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <Reset+0x98>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a1c      	ldr	r2, [pc, #112]	; (8000b8c <Reset+0x9c>)
 8000b1a:	6013      	str	r3, [r2, #0]
	t_1 = max_Green;
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <Reset+0xa0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <Reset+0xa4>)
 8000b22:	6013      	str	r3, [r2, #0]
	i_2 = max_Red;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <Reset+0x90>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <Reset+0xa8>)
 8000b2a:	6013      	str	r3, [r2, #0]
	j_2 = max_Yellow;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <Reset+0x98>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a1a      	ldr	r2, [pc, #104]	; (8000b9c <Reset+0xac>)
 8000b32:	6013      	str	r3, [r2, #0]
	t_2 = max_Green;
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <Reset+0xa0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <Reset+0xb0>)
 8000b3a:	6013      	str	r3, [r2, #0]
	test = 1; random = 1; dem = 2;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <Reset+0xb4>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <Reset+0xb8>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <Reset+0xbc>)
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	601a      	str	r2, [r3, #0]
	turn = 0;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <Reset+0xc0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
	counter = 0, counter2 = 1;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <Reset+0xc4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <Reset+0xc8>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]
	bool = 0;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <Reset+0xcc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000090 	.word	0x20000090
 8000b74:	200000e4 	.word	0x200000e4
 8000b78:	20000094 	.word	0x20000094
 8000b7c:	200000e8 	.word	0x200000e8
 8000b80:	20000078 	.word	0x20000078
 8000b84:	20000054 	.word	0x20000054
 8000b88:	2000007c 	.word	0x2000007c
 8000b8c:	20000058 	.word	0x20000058
 8000b90:	20000080 	.word	0x20000080
 8000b94:	2000005c 	.word	0x2000005c
 8000b98:	20000060 	.word	0x20000060
 8000b9c:	20000064 	.word	0x20000064
 8000ba0:	20000068 	.word	0x20000068
 8000ba4:	2000006c 	.word	0x2000006c
 8000ba8:	20000070 	.word	0x20000070
 8000bac:	20000074 	.word	0x20000074
 8000bb0:	200000d8 	.word	0x200000d8
 8000bb4:	200000d4 	.word	0x200000d4
 8000bb8:	20000050 	.word	0x20000050
 8000bbc:	200000d0 	.word	0x200000d0

08000bc0 <case1>:

void case1() {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

	switch(counter){
 8000bc4:	4ba5      	ldr	r3, [pc, #660]	; (8000e5c <case1+0x29c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d079      	beq.n	8000cc0 <case1+0x100>
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	f300 80b3 	bgt.w	8000d38 <case1+0x178>
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d002      	beq.n	8000bdc <case1+0x1c>
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d039      	beq.n	8000c4e <case1+0x8e>
 8000bda:	e0ad      	b.n	8000d38 <case1+0x178>
	case 0:
		LED_RED_1();
 8000bdc:	f000 fc28 	bl	8001430 <LED_RED_1>
		if (random == 1) {
 8000be0:	4b9f      	ldr	r3, [pc, #636]	; (8000e60 <case1+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d10b      	bne.n	8000c00 <case1+0x40>
			display7SEG(i_1 / 10);
 8000be8:	4b9e      	ldr	r3, [pc, #632]	; (8000e64 <case1+0x2a4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a9e      	ldr	r2, [pc, #632]	; (8000e68 <case1+0x2a8>)
 8000bee:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf2:	1092      	asrs	r2, r2, #2
 8000bf4:	17db      	asrs	r3, r3, #31
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fc87 	bl	800050c <display7SEG>
 8000bfe:	e00f      	b.n	8000c20 <case1+0x60>
		} else {
			display7SEG(i_1 % 10);
 8000c00:	4b98      	ldr	r3, [pc, #608]	; (8000e64 <case1+0x2a4>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b98      	ldr	r3, [pc, #608]	; (8000e68 <case1+0x2a8>)
 8000c06:	fb83 1302 	smull	r1, r3, r3, r2
 8000c0a:	1099      	asrs	r1, r3, #2
 8000c0c:	17d3      	asrs	r3, r2, #31
 8000c0e:	1ac9      	subs	r1, r1, r3
 8000c10:	460b      	mov	r3, r1
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	440b      	add	r3, r1
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	1ad1      	subs	r1, r2, r3
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	f7ff fc76 	bl	800050c <display7SEG>
		}
		if(dem == 0){
 8000c20:	4b92      	ldr	r3, [pc, #584]	; (8000e6c <case1+0x2ac>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d104      	bne.n	8000c32 <case1+0x72>
			i_1--;
 8000c28:	4b8e      	ldr	r3, [pc, #568]	; (8000e64 <case1+0x2a4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	4a8d      	ldr	r2, [pc, #564]	; (8000e64 <case1+0x2a4>)
 8000c30:	6013      	str	r3, [r2, #0]
		}
		if(i_1 == 0) {
 8000c32:	4b8c      	ldr	r3, [pc, #560]	; (8000e64 <case1+0x2a4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d179      	bne.n	8000d2e <case1+0x16e>
			i_1 = max_Red;
 8000c3a:	4b8d      	ldr	r3, [pc, #564]	; (8000e70 <case1+0x2b0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a89      	ldr	r2, [pc, #548]	; (8000e64 <case1+0x2a4>)
 8000c40:	6013      	str	r3, [r2, #0]
			counter++;
 8000c42:	4b86      	ldr	r3, [pc, #536]	; (8000e5c <case1+0x29c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	4a84      	ldr	r2, [pc, #528]	; (8000e5c <case1+0x29c>)
 8000c4a:	6013      	str	r3, [r2, #0]
		}
		break;
 8000c4c:	e06f      	b.n	8000d2e <case1+0x16e>
	case 1:
		LED_GREEN_1();
 8000c4e:	f000 fc07 	bl	8001460 <LED_GREEN_1>
		if (random == 1) {
 8000c52:	4b83      	ldr	r3, [pc, #524]	; (8000e60 <case1+0x2a0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d10b      	bne.n	8000c72 <case1+0xb2>
			display7SEG(t_1 / 10);
 8000c5a:	4b86      	ldr	r3, [pc, #536]	; (8000e74 <case1+0x2b4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a82      	ldr	r2, [pc, #520]	; (8000e68 <case1+0x2a8>)
 8000c60:	fb82 1203 	smull	r1, r2, r2, r3
 8000c64:	1092      	asrs	r2, r2, #2
 8000c66:	17db      	asrs	r3, r3, #31
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fc4e 	bl	800050c <display7SEG>
 8000c70:	e00f      	b.n	8000c92 <case1+0xd2>
		} else {
			display7SEG(t_1 % 10);
 8000c72:	4b80      	ldr	r3, [pc, #512]	; (8000e74 <case1+0x2b4>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b7c      	ldr	r3, [pc, #496]	; (8000e68 <case1+0x2a8>)
 8000c78:	fb83 1302 	smull	r1, r3, r3, r2
 8000c7c:	1099      	asrs	r1, r3, #2
 8000c7e:	17d3      	asrs	r3, r2, #31
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	460b      	mov	r3, r1
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	440b      	add	r3, r1
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	1ad1      	subs	r1, r2, r3
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	f7ff fc3d 	bl	800050c <display7SEG>
		}
		if(dem == 0){
 8000c92:	4b76      	ldr	r3, [pc, #472]	; (8000e6c <case1+0x2ac>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d104      	bne.n	8000ca4 <case1+0xe4>
			t_1--;
 8000c9a:	4b76      	ldr	r3, [pc, #472]	; (8000e74 <case1+0x2b4>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	4a74      	ldr	r2, [pc, #464]	; (8000e74 <case1+0x2b4>)
 8000ca2:	6013      	str	r3, [r2, #0]
		}
		if(t_1 == 0) {
 8000ca4:	4b73      	ldr	r3, [pc, #460]	; (8000e74 <case1+0x2b4>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d142      	bne.n	8000d32 <case1+0x172>
			t_1 = max_Green;
 8000cac:	4b72      	ldr	r3, [pc, #456]	; (8000e78 <case1+0x2b8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a70      	ldr	r2, [pc, #448]	; (8000e74 <case1+0x2b4>)
 8000cb2:	6013      	str	r3, [r2, #0]
			counter++;
 8000cb4:	4b69      	ldr	r3, [pc, #420]	; (8000e5c <case1+0x29c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	4a68      	ldr	r2, [pc, #416]	; (8000e5c <case1+0x29c>)
 8000cbc:	6013      	str	r3, [r2, #0]
		}
		break;
 8000cbe:	e038      	b.n	8000d32 <case1+0x172>
	case 2:
		LED_YELLOW_1();
 8000cc0:	f000 fbe6 	bl	8001490 <LED_YELLOW_1>
		if (random == 1) {
 8000cc4:	4b66      	ldr	r3, [pc, #408]	; (8000e60 <case1+0x2a0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d10b      	bne.n	8000ce4 <case1+0x124>
			display7SEG(j_1 / 10);
 8000ccc:	4b6b      	ldr	r3, [pc, #428]	; (8000e7c <case1+0x2bc>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a65      	ldr	r2, [pc, #404]	; (8000e68 <case1+0x2a8>)
 8000cd2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd6:	1092      	asrs	r2, r2, #2
 8000cd8:	17db      	asrs	r3, r3, #31
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fc15 	bl	800050c <display7SEG>
 8000ce2:	e00f      	b.n	8000d04 <case1+0x144>
		} else {
			display7SEG(j_1 % 10);
 8000ce4:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <case1+0x2bc>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b5f      	ldr	r3, [pc, #380]	; (8000e68 <case1+0x2a8>)
 8000cea:	fb83 1302 	smull	r1, r3, r3, r2
 8000cee:	1099      	asrs	r1, r3, #2
 8000cf0:	17d3      	asrs	r3, r2, #31
 8000cf2:	1ac9      	subs	r1, r1, r3
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	1ad1      	subs	r1, r2, r3
 8000cfe:	4608      	mov	r0, r1
 8000d00:	f7ff fc04 	bl	800050c <display7SEG>
		}
		if(dem == 0){
 8000d04:	4b59      	ldr	r3, [pc, #356]	; (8000e6c <case1+0x2ac>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d104      	bne.n	8000d16 <case1+0x156>
			j_1--;
 8000d0c:	4b5b      	ldr	r3, [pc, #364]	; (8000e7c <case1+0x2bc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	4a5a      	ldr	r2, [pc, #360]	; (8000e7c <case1+0x2bc>)
 8000d14:	6013      	str	r3, [r2, #0]
		}
		if(j_1 == 0) {
 8000d16:	4b59      	ldr	r3, [pc, #356]	; (8000e7c <case1+0x2bc>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10b      	bne.n	8000d36 <case1+0x176>
			j_1 = max_Yellow;
 8000d1e:	4b58      	ldr	r3, [pc, #352]	; (8000e80 <case1+0x2c0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a56      	ldr	r2, [pc, #344]	; (8000e7c <case1+0x2bc>)
 8000d24:	6013      	str	r3, [r2, #0]
			counter = 0;
 8000d26:	4b4d      	ldr	r3, [pc, #308]	; (8000e5c <case1+0x29c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d2c:	e003      	b.n	8000d36 <case1+0x176>
		break;
 8000d2e:	bf00      	nop
 8000d30:	e002      	b.n	8000d38 <case1+0x178>
		break;
 8000d32:	bf00      	nop
 8000d34:	e000      	b.n	8000d38 <case1+0x178>
		break;
 8000d36:	bf00      	nop
	}

	switch(counter2){
 8000d38:	4b52      	ldr	r3, [pc, #328]	; (8000e84 <case1+0x2c4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d07a      	beq.n	8000e36 <case1+0x276>
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	f300 80d1 	bgt.w	8000ee8 <case1+0x328>
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d002      	beq.n	8000d50 <case1+0x190>
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d03a      	beq.n	8000dc4 <case1+0x204>
			j_2 = max_Yellow;
			counter2 = 0;
		}
		break;
	}
}
 8000d4e:	e0cb      	b.n	8000ee8 <case1+0x328>
		LED_RED_2();
 8000d50:	f000 fbb6 	bl	80014c0 <LED_RED_2>
		if (random == 1) {
 8000d54:	4b42      	ldr	r3, [pc, #264]	; (8000e60 <case1+0x2a0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d10b      	bne.n	8000d74 <case1+0x1b4>
			display7SEG_1(i_2 / 10);
 8000d5c:	4b4a      	ldr	r3, [pc, #296]	; (8000e88 <case1+0x2c8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a41      	ldr	r2, [pc, #260]	; (8000e68 <case1+0x2a8>)
 8000d62:	fb82 1203 	smull	r1, r2, r2, r3
 8000d66:	1092      	asrs	r2, r2, #2
 8000d68:	17db      	asrs	r3, r3, #31
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fdb1 	bl	80008d4 <display7SEG_1>
 8000d72:	e00f      	b.n	8000d94 <case1+0x1d4>
			display7SEG_1(i_2 % 10);
 8000d74:	4b44      	ldr	r3, [pc, #272]	; (8000e88 <case1+0x2c8>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b3b      	ldr	r3, [pc, #236]	; (8000e68 <case1+0x2a8>)
 8000d7a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d7e:	1099      	asrs	r1, r3, #2
 8000d80:	17d3      	asrs	r3, r2, #31
 8000d82:	1ac9      	subs	r1, r1, r3
 8000d84:	460b      	mov	r3, r1
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	1ad1      	subs	r1, r2, r3
 8000d8e:	4608      	mov	r0, r1
 8000d90:	f7ff fda0 	bl	80008d4 <display7SEG_1>
		if(dem == 0){
 8000d94:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <case1+0x2ac>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d104      	bne.n	8000da6 <case1+0x1e6>
			i_2--;
 8000d9c:	4b3a      	ldr	r3, [pc, #232]	; (8000e88 <case1+0x2c8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	4a39      	ldr	r2, [pc, #228]	; (8000e88 <case1+0x2c8>)
 8000da4:	6013      	str	r3, [r2, #0]
		if(i_2 == 0) {
 8000da6:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <case1+0x2c8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f040 8097 	bne.w	8000ede <case1+0x31e>
			i_2 = max_Red;
 8000db0:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <case1+0x2b0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a34      	ldr	r2, [pc, #208]	; (8000e88 <case1+0x2c8>)
 8000db6:	6013      	str	r3, [r2, #0]
			counter2++;
 8000db8:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <case1+0x2c4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <case1+0x2c4>)
 8000dc0:	6013      	str	r3, [r2, #0]
		break;
 8000dc2:	e08c      	b.n	8000ede <case1+0x31e>
		LED_GREEN_2();
 8000dc4:	f000 fb94 	bl	80014f0 <LED_GREEN_2>
		if (random == 1) {
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <case1+0x2a0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d10b      	bne.n	8000de8 <case1+0x228>
			display7SEG_1(t_2 / 10);
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <case1+0x2cc>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a24      	ldr	r2, [pc, #144]	; (8000e68 <case1+0x2a8>)
 8000dd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dda:	1092      	asrs	r2, r2, #2
 8000ddc:	17db      	asrs	r3, r3, #31
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fd77 	bl	80008d4 <display7SEG_1>
 8000de6:	e00f      	b.n	8000e08 <case1+0x248>
			display7SEG_1(t_2 % 10);
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <case1+0x2cc>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <case1+0x2a8>)
 8000dee:	fb83 1302 	smull	r1, r3, r3, r2
 8000df2:	1099      	asrs	r1, r3, #2
 8000df4:	17d3      	asrs	r3, r2, #31
 8000df6:	1ac9      	subs	r1, r1, r3
 8000df8:	460b      	mov	r3, r1
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	1ad1      	subs	r1, r2, r3
 8000e02:	4608      	mov	r0, r1
 8000e04:	f7ff fd66 	bl	80008d4 <display7SEG_1>
		if(dem == 0){
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <case1+0x2ac>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d104      	bne.n	8000e1a <case1+0x25a>
			t_2--;
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <case1+0x2cc>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	4a1d      	ldr	r2, [pc, #116]	; (8000e8c <case1+0x2cc>)
 8000e18:	6013      	str	r3, [r2, #0]
		if(t_2 == 0) {
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <case1+0x2cc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d15f      	bne.n	8000ee2 <case1+0x322>
			t_2 = max_Green;
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <case1+0x2b8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a19      	ldr	r2, [pc, #100]	; (8000e8c <case1+0x2cc>)
 8000e28:	6013      	str	r3, [r2, #0]
			counter2++;
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <case1+0x2c4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <case1+0x2c4>)
 8000e32:	6013      	str	r3, [r2, #0]
		break;
 8000e34:	e055      	b.n	8000ee2 <case1+0x322>
		LED_YELLOW_2();
 8000e36:	f000 fb73 	bl	8001520 <LED_YELLOW_2>
		if (random == 1) {
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <case1+0x2a0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d128      	bne.n	8000e94 <case1+0x2d4>
			display7SEG_1(j_2 / 10);
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <case1+0x2d0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <case1+0x2a8>)
 8000e48:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4c:	1092      	asrs	r2, r2, #2
 8000e4e:	17db      	asrs	r3, r3, #31
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fd3e 	bl	80008d4 <display7SEG_1>
 8000e58:	e02c      	b.n	8000eb4 <case1+0x2f4>
 8000e5a:	bf00      	nop
 8000e5c:	200000d4 	.word	0x200000d4
 8000e60:	20000070 	.word	0x20000070
 8000e64:	20000054 	.word	0x20000054
 8000e68:	66666667 	.word	0x66666667
 8000e6c:	20000074 	.word	0x20000074
 8000e70:	20000078 	.word	0x20000078
 8000e74:	2000005c 	.word	0x2000005c
 8000e78:	20000080 	.word	0x20000080
 8000e7c:	20000058 	.word	0x20000058
 8000e80:	2000007c 	.word	0x2000007c
 8000e84:	20000050 	.word	0x20000050
 8000e88:	20000060 	.word	0x20000060
 8000e8c:	20000068 	.word	0x20000068
 8000e90:	20000064 	.word	0x20000064
			display7SEG_1(j_2 % 10);
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <case1+0x32c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <case1+0x330>)
 8000e9a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e9e:	1099      	asrs	r1, r3, #2
 8000ea0:	17d3      	asrs	r3, r2, #31
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	1ad1      	subs	r1, r2, r3
 8000eae:	4608      	mov	r0, r1
 8000eb0:	f7ff fd10 	bl	80008d4 <display7SEG_1>
		if(dem == 0){
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <case1+0x334>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d104      	bne.n	8000ec6 <case1+0x306>
			j_2--;
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <case1+0x32c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <case1+0x32c>)
 8000ec4:	6013      	str	r3, [r2, #0]
		if(j_2 == 0) {
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <case1+0x32c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10b      	bne.n	8000ee6 <case1+0x326>
			j_2 = max_Yellow;
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <case1+0x338>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a06      	ldr	r2, [pc, #24]	; (8000eec <case1+0x32c>)
 8000ed4:	6013      	str	r3, [r2, #0]
			counter2 = 0;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <case1+0x33c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
		break;
 8000edc:	e003      	b.n	8000ee6 <case1+0x326>
		break;
 8000ede:	bf00      	nop
 8000ee0:	e002      	b.n	8000ee8 <case1+0x328>
		break;
 8000ee2:	bf00      	nop
 8000ee4:	e000      	b.n	8000ee8 <case1+0x328>
		break;
 8000ee6:	bf00      	nop
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000064 	.word	0x20000064
 8000ef0:	66666667 	.word	0x66666667
 8000ef4:	20000074 	.word	0x20000074
 8000ef8:	2000007c 	.word	0x2000007c
 8000efc:	20000050 	.word	0x20000050

08000f00 <case2>:

int case2(int mode,int a,
		GPIO_TypeDef* D0_PORT, uint16_t D0_PIN, GPIO_TypeDef* D1_PORT, uint16_t D1_PIN,
		GPIO_TypeDef* D2_PORT, uint16_t D2_PIN, GPIO_TypeDef* D3_PORT, uint16_t D3_PIN,
		GPIO_TypeDef* D4_PORT, uint16_t D4_PIN, GPIO_TypeDef* D5_PORT, uint16_t D5_PIN){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	807b      	strh	r3, [r7, #2]
	setup_Led7SEG();
 8000f0e:	f000 fa41 	bl	8001394 <setup_Led7SEG>

	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f18:	484b      	ldr	r0, [pc, #300]	; (8001048 <case2+0x148>)
 8000f1a:	f001 f83a 	bl	8001f92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f24:	4848      	ldr	r0, [pc, #288]	; (8001048 <case2+0x148>)
 8000f26:	f001 f834 	bl	8001f92 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D0_PORT, D0_PIN, en0);
 8000f2a:	4b48      	ldr	r3, [pc, #288]	; (800104c <case2+0x14c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	4619      	mov	r1, r3
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f001 f82c 	bl	8001f92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_PORT, D1_PIN, en0);
 8000f3a:	4b44      	ldr	r3, [pc, #272]	; (800104c <case2+0x14c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	8bbb      	ldrh	r3, [r7, #28]
 8000f42:	4619      	mov	r1, r3
 8000f44:	69b8      	ldr	r0, [r7, #24]
 8000f46:	f001 f824 	bl	8001f92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_PORT, D2_PIN, 0);
 8000f4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4619      	mov	r1, r3
 8000f50:	6a38      	ldr	r0, [r7, #32]
 8000f52:	f001 f81e 	bl	8001f92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_PORT, D3_PIN, 0);
 8000f56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f5e:	f001 f818 	bl	8001f92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_PORT, D4_PIN, 0);
 8000f62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000f64:	2200      	movs	r2, #0
 8000f66:	4619      	mov	r1, r3
 8000f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f6a:	f001 f812 	bl	8001f92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_PORT, D5_PIN, 0);
 8000f6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000f76:	f001 f80c 	bl	8001f92 <HAL_GPIO_WritePin>
	display7SEG_1(mode + 1);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fca8 	bl	80008d4 <display7SEG_1>

	if(button_flag[1] == 1){
 8000f84:	4b32      	ldr	r3, [pc, #200]	; (8001050 <case2+0x150>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d105      	bne.n	8000f98 <case2+0x98>
	  button_flag[1] = 0;
 8000f8c:	4b30      	ldr	r3, [pc, #192]	; (8001050 <case2+0x150>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	605a      	str	r2, [r3, #4]
	  a++;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	3301      	adds	r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
	}
	if(button_flag[2] == 1){
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <case2+0x150>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d11b      	bne.n	8000fd8 <case2+0xd8>
	  button_flag[2] = 0;
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <case2+0x150>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
	  switch(mode){
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d011      	beq.n	8000fd0 <case2+0xd0>
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	dc13      	bgt.n	8000fda <case2+0xda>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d003      	beq.n	8000fc0 <case2+0xc0>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d004      	beq.n	8000fc8 <case2+0xc8>
 8000fbe:	e00c      	b.n	8000fda <case2+0xda>
	  case 1:
		  prev_max_Red = a;
 8000fc0:	4a24      	ldr	r2, [pc, #144]	; (8001054 <case2+0x154>)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	6013      	str	r3, [r2, #0]
		  break;
 8000fc6:	e008      	b.n	8000fda <case2+0xda>
	  case 2:
		  prev_max_Yellow = a;
 8000fc8:	4a23      	ldr	r2, [pc, #140]	; (8001058 <case2+0x158>)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	6013      	str	r3, [r2, #0]
		  break;
 8000fce:	e004      	b.n	8000fda <case2+0xda>
	  case 3:
		  prev_max_Green = a;
 8000fd0:	4a22      	ldr	r2, [pc, #136]	; (800105c <case2+0x15c>)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	6013      	str	r3, [r2, #0]
		  break;
 8000fd6:	e000      	b.n	8000fda <case2+0xda>
	  }
	}
 8000fd8:	bf00      	nop
	if(button_flag[3] == 1){
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <case2+0x150>)
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d105      	bne.n	8000fee <case2+0xee>
	  button_flag[3] = 0;
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <case2+0x150>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
	  a--;
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
	}
	if(a > 99) a = 0;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	2b63      	cmp	r3, #99	; 0x63
 8000ff2:	dd01      	ble.n	8000ff8 <case2+0xf8>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
	if(a < 0) a = 99;
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da01      	bge.n	8001002 <case2+0x102>
 8000ffe:	2363      	movs	r3, #99	; 0x63
 8001000:	60bb      	str	r3, [r7, #8]
	if(random == 1)
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <case2+0x160>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d10a      	bne.n	8001020 <case2+0x120>
	  display7SEG(a / 10);
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	4a15      	ldr	r2, [pc, #84]	; (8001064 <case2+0x164>)
 800100e:	fb82 1203 	smull	r1, r2, r2, r3
 8001012:	1092      	asrs	r2, r2, #2
 8001014:	17db      	asrs	r3, r3, #31
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa77 	bl	800050c <display7SEG>
 800101e:	e00e      	b.n	800103e <case2+0x13e>
	else
	  display7SEG(a % 10);
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <case2+0x164>)
 8001024:	fb83 1302 	smull	r1, r3, r3, r2
 8001028:	1099      	asrs	r1, r3, #2
 800102a:	17d3      	asrs	r3, r2, #31
 800102c:	1ac9      	subs	r1, r1, r3
 800102e:	460b      	mov	r3, r1
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	1ad1      	subs	r1, r2, r3
 8001038:	4608      	mov	r0, r1
 800103a:	f7ff fa67 	bl	800050c <display7SEG>
	return a;
 800103e:	68bb      	ldr	r3, [r7, #8]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40010800 	.word	0x40010800
 800104c:	20000090 	.word	0x20000090
 8001050:	200000c0 	.word	0x200000c0
 8001054:	20000084 	.word	0x20000084
 8001058:	20000088 	.word	0x20000088
 800105c:	2000008c 	.word	0x2000008c
 8001060:	20000070 	.word	0x20000070
 8001064:	66666667 	.word	0x66666667

08001068 <fsm_manual>:

#include "fsm_manual.h"

int temp, test_1 = 0;

void fsm_manual(){
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af0a      	add	r7, sp, #40	; 0x28
	if(button_flag[0] == 1){
 800106e:	4b7f      	ldr	r3, [pc, #508]	; (800126c <fsm_manual+0x204>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d142      	bne.n	80010fc <fsm_manual+0x94>
		button_flag[0] = 0;
 8001076:	4b7d      	ldr	r3, [pc, #500]	; (800126c <fsm_manual+0x204>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
		mode++;
 800107c:	4b7c      	ldr	r3, [pc, #496]	; (8001270 <fsm_manual+0x208>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	4a7b      	ldr	r2, [pc, #492]	; (8001270 <fsm_manual+0x208>)
 8001084:	6013      	str	r3, [r2, #0]
		test_1 = 1;
 8001086:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <fsm_manual+0x20c>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]
		if(mode == 4) {
 800108c:	4b78      	ldr	r3, [pc, #480]	; (8001270 <fsm_manual+0x208>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b04      	cmp	r3, #4
 8001092:	d133      	bne.n	80010fc <fsm_manual+0x94>
			if(prev_max_Red == prev_max_Green + prev_max_Yellow){
 8001094:	4b78      	ldr	r3, [pc, #480]	; (8001278 <fsm_manual+0x210>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b78      	ldr	r3, [pc, #480]	; (800127c <fsm_manual+0x214>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	441a      	add	r2, r3
 800109e:	4b78      	ldr	r3, [pc, #480]	; (8001280 <fsm_manual+0x218>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d10c      	bne.n	80010c0 <fsm_manual+0x58>
				max_Red = prev_max_Red;
 80010a6:	4b76      	ldr	r3, [pc, #472]	; (8001280 <fsm_manual+0x218>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a76      	ldr	r2, [pc, #472]	; (8001284 <fsm_manual+0x21c>)
 80010ac:	6013      	str	r3, [r2, #0]
				max_Green = prev_max_Green;
 80010ae:	4b72      	ldr	r3, [pc, #456]	; (8001278 <fsm_manual+0x210>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a75      	ldr	r2, [pc, #468]	; (8001288 <fsm_manual+0x220>)
 80010b4:	6013      	str	r3, [r2, #0]
				max_Yellow = prev_max_Yellow;
 80010b6:	4b71      	ldr	r3, [pc, #452]	; (800127c <fsm_manual+0x214>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a74      	ldr	r2, [pc, #464]	; (800128c <fsm_manual+0x224>)
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e018      	b.n	80010f2 <fsm_manual+0x8a>
			}else if(prev_max_Red > prev_max_Yellow){
 80010c0:	4b6f      	ldr	r3, [pc, #444]	; (8001280 <fsm_manual+0x218>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b6d      	ldr	r3, [pc, #436]	; (800127c <fsm_manual+0x214>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dd12      	ble.n	80010f2 <fsm_manual+0x8a>
				prev_max_Green = prev_max_Red - prev_max_Yellow;
 80010cc:	4b6c      	ldr	r3, [pc, #432]	; (8001280 <fsm_manual+0x218>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b6a      	ldr	r3, [pc, #424]	; (800127c <fsm_manual+0x214>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	4a68      	ldr	r2, [pc, #416]	; (8001278 <fsm_manual+0x210>)
 80010d8:	6013      	str	r3, [r2, #0]
				max_Red = prev_max_Red;
 80010da:	4b69      	ldr	r3, [pc, #420]	; (8001280 <fsm_manual+0x218>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a69      	ldr	r2, [pc, #420]	; (8001284 <fsm_manual+0x21c>)
 80010e0:	6013      	str	r3, [r2, #0]
				max_Green = prev_max_Green;
 80010e2:	4b65      	ldr	r3, [pc, #404]	; (8001278 <fsm_manual+0x210>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a68      	ldr	r2, [pc, #416]	; (8001288 <fsm_manual+0x220>)
 80010e8:	6013      	str	r3, [r2, #0]
				max_Yellow = prev_max_Yellow;
 80010ea:	4b64      	ldr	r3, [pc, #400]	; (800127c <fsm_manual+0x214>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a67      	ldr	r2, [pc, #412]	; (800128c <fsm_manual+0x224>)
 80010f0:	6013      	str	r3, [r2, #0]
			}
			Reset();
 80010f2:	f7ff fcfd 	bl	8000af0 <Reset>
			mode = 0;
 80010f6:	4b5e      	ldr	r3, [pc, #376]	; (8001270 <fsm_manual+0x208>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
		}
	}
	switch(mode){
 80010fc:	4b5c      	ldr	r3, [pc, #368]	; (8001270 <fsm_manual+0x208>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b03      	cmp	r3, #3
 8001102:	f200 8109 	bhi.w	8001318 <fsm_manual+0x2b0>
 8001106:	a201      	add	r2, pc, #4	; (adr r2, 800110c <fsm_manual+0xa4>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	0800111d 	.word	0x0800111d
 8001110:	080011a7 	.word	0x080011a7
 8001114:	08001209 	.word	0x08001209
 8001118:	080012b5 	.word	0x080012b5
	case 0:
	  if(timer_flag[0] == 1){
 800111c:	4b5c      	ldr	r3, [pc, #368]	; (8001290 <fsm_manual+0x228>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	f040 80f8 	bne.w	8001316 <fsm_manual+0x2ae>
		  switch(en0){
 8001126:	4b5b      	ldr	r3, [pc, #364]	; (8001294 <fsm_manual+0x22c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <fsm_manual+0xcc>
 800112e:	2b01      	cmp	r3, #1
 8001130:	d007      	beq.n	8001142 <fsm_manual+0xda>
 8001132:	e00d      	b.n	8001150 <fsm_manual+0xe8>
			case 0:
				en0 = 1;
 8001134:	4b57      	ldr	r3, [pc, #348]	; (8001294 <fsm_manual+0x22c>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]
				en1 = 0;
 800113a:	4b57      	ldr	r3, [pc, #348]	; (8001298 <fsm_manual+0x230>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
				break;
 8001140:	e006      	b.n	8001150 <fsm_manual+0xe8>
			case 1:
				en0 = 0;
 8001142:	4b54      	ldr	r3, [pc, #336]	; (8001294 <fsm_manual+0x22c>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
				en1 = 1;
 8001148:	4b53      	ldr	r3, [pc, #332]	; (8001298 <fsm_manual+0x230>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]
				break;
 800114e:	bf00      	nop
			}
			if(mode == 0){
 8001150:	4b47      	ldr	r3, [pc, #284]	; (8001270 <fsm_manual+0x208>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d108      	bne.n	800116a <fsm_manual+0x102>
				en2 = en0;
 8001158:	4b4e      	ldr	r3, [pc, #312]	; (8001294 <fsm_manual+0x22c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a4f      	ldr	r2, [pc, #316]	; (800129c <fsm_manual+0x234>)
 800115e:	6013      	str	r3, [r2, #0]
				en3 = en1;
 8001160:	4b4d      	ldr	r3, [pc, #308]	; (8001298 <fsm_manual+0x230>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a4e      	ldr	r2, [pc, #312]	; (80012a0 <fsm_manual+0x238>)
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	e005      	b.n	8001176 <fsm_manual+0x10e>
			}else{
				en2 = 0;
 800116a:	4b4c      	ldr	r3, [pc, #304]	; (800129c <fsm_manual+0x234>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
				en3 = 1;
 8001170:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <fsm_manual+0x238>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
			}
			random = -random;
 8001176:	4b4b      	ldr	r3, [pc, #300]	; (80012a4 <fsm_manual+0x23c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	425b      	negs	r3, r3
 800117c:	4a49      	ldr	r2, [pc, #292]	; (80012a4 <fsm_manual+0x23c>)
 800117e:	6013      	str	r3, [r2, #0]
		  dem--;
 8001180:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <fsm_manual+0x240>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3b01      	subs	r3, #1
 8001186:	4a48      	ldr	r2, [pc, #288]	; (80012a8 <fsm_manual+0x240>)
 8001188:	6013      	str	r3, [r2, #0]
		  case1();
 800118a:	f7ff fd19 	bl	8000bc0 <case1>
		  if(dem == 0){
 800118e:	4b46      	ldr	r3, [pc, #280]	; (80012a8 <fsm_manual+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <fsm_manual+0x134>
			  dem = 2;
 8001196:	4b44      	ldr	r3, [pc, #272]	; (80012a8 <fsm_manual+0x240>)
 8001198:	2202      	movs	r2, #2
 800119a:	601a      	str	r2, [r3, #0]
		  }
		  setTimer(0, 50);
 800119c:	2132      	movs	r1, #50	; 0x32
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 faf2 	bl	8001788 <setTimer>
	  }
	  break;
 80011a4:	e0b7      	b.n	8001316 <fsm_manual+0x2ae>
	case 1:
		if(test_1 == 1){
 80011a6:	4b33      	ldr	r3, [pc, #204]	; (8001274 <fsm_manual+0x20c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d106      	bne.n	80011bc <fsm_manual+0x154>
			temp = max_Red;
 80011ae:	4b35      	ldr	r3, [pc, #212]	; (8001284 <fsm_manual+0x21c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a3e      	ldr	r2, [pc, #248]	; (80012ac <fsm_manual+0x244>)
 80011b4:	6013      	str	r3, [r2, #0]
			test_1 = 0;
 80011b6:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <fsm_manual+0x20c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
		}
		temp = case2(mode, temp,
 80011bc:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <fsm_manual+0x208>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	4b3a      	ldr	r3, [pc, #232]	; (80012ac <fsm_manual+0x244>)
 80011c2:	6819      	ldr	r1, [r3, #0]
 80011c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011c8:	9309      	str	r3, [sp, #36]	; 0x24
 80011ca:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <fsm_manual+0x248>)
 80011cc:	9308      	str	r3, [sp, #32]
 80011ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011d2:	9307      	str	r3, [sp, #28]
 80011d4:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <fsm_manual+0x248>)
 80011d6:	9306      	str	r3, [sp, #24]
 80011d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011dc:	9305      	str	r3, [sp, #20]
 80011de:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <fsm_manual+0x248>)
 80011e0:	9304      	str	r3, [sp, #16]
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	9303      	str	r3, [sp, #12]
 80011e8:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <fsm_manual+0x248>)
 80011ea:	9302      	str	r3, [sp, #8]
 80011ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <fsm_manual+0x248>)
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fa:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <fsm_manual+0x248>)
 80011fc:	f7ff fe80 	bl	8000f00 <case2>
 8001200:	4603      	mov	r3, r0
 8001202:	4a2a      	ldr	r2, [pc, #168]	; (80012ac <fsm_manual+0x244>)
 8001204:	6013      	str	r3, [r2, #0]
			  LED_RED_1_GPIO_Port, LED_RED_1_Pin,LED_RED_2_GPIO_Port, LED_RED_2_Pin,
			  LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin,LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin,
			  LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin,LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin
		);
		break;
 8001206:	e087      	b.n	8001318 <fsm_manual+0x2b0>
	case 2:
		if(test_1 == 1){
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <fsm_manual+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d106      	bne.n	800121e <fsm_manual+0x1b6>
			temp = max_Yellow;
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <fsm_manual+0x224>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a25      	ldr	r2, [pc, #148]	; (80012ac <fsm_manual+0x244>)
 8001216:	6013      	str	r3, [r2, #0]
			test_1 = 0;
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <fsm_manual+0x20c>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
		}
		temp = case2(mode, temp,
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <fsm_manual+0x208>)
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <fsm_manual+0x244>)
 8001224:	6819      	ldr	r1, [r3, #0]
 8001226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800122a:	9309      	str	r3, [sp, #36]	; 0x24
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <fsm_manual+0x248>)
 800122e:	9308      	str	r3, [sp, #32]
 8001230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001234:	9307      	str	r3, [sp, #28]
 8001236:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <fsm_manual+0x248>)
 8001238:	9306      	str	r3, [sp, #24]
 800123a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123e:	9305      	str	r3, [sp, #20]
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <fsm_manual+0x248>)
 8001242:	9304      	str	r3, [sp, #16]
 8001244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001248:	9303      	str	r3, [sp, #12]
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <fsm_manual+0x248>)
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <fsm_manual+0x248>)
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <fsm_manual+0x248>)
 800125e:	f7ff fe4f 	bl	8000f00 <case2>
 8001262:	4603      	mov	r3, r0
 8001264:	4a11      	ldr	r2, [pc, #68]	; (80012ac <fsm_manual+0x244>)
 8001266:	6013      	str	r3, [r2, #0]
			  LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin,LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin,
			  LED_RED_1_GPIO_Port, LED_RED_1_Pin,LED_RED_2_GPIO_Port, LED_RED_2_Pin,
			  LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin,LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin
		);
		break;
 8001268:	e056      	b.n	8001318 <fsm_manual+0x2b0>
 800126a:	bf00      	nop
 800126c:	200000c0 	.word	0x200000c0
 8001270:	200000e0 	.word	0x200000e0
 8001274:	200000dc 	.word	0x200000dc
 8001278:	2000008c 	.word	0x2000008c
 800127c:	20000088 	.word	0x20000088
 8001280:	20000084 	.word	0x20000084
 8001284:	20000078 	.word	0x20000078
 8001288:	20000080 	.word	0x20000080
 800128c:	2000007c 	.word	0x2000007c
 8001290:	20000114 	.word	0x20000114
 8001294:	20000090 	.word	0x20000090
 8001298:	200000e4 	.word	0x200000e4
 800129c:	20000094 	.word	0x20000094
 80012a0:	200000e8 	.word	0x200000e8
 80012a4:	20000070 	.word	0x20000070
 80012a8:	20000074 	.word	0x20000074
 80012ac:	2000013c 	.word	0x2000013c
 80012b0:	40010800 	.word	0x40010800
	case 3:
		if(test_1 == 1){
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <fsm_manual+0x2b8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d106      	bne.n	80012ca <fsm_manual+0x262>
			temp = max_Green;
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <fsm_manual+0x2bc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a19      	ldr	r2, [pc, #100]	; (8001328 <fsm_manual+0x2c0>)
 80012c2:	6013      	str	r3, [r2, #0]
			test_1 = 0;
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <fsm_manual+0x2b8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
		}
		temp = case2(mode, temp,
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <fsm_manual+0x2c4>)
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <fsm_manual+0x2c0>)
 80012d0:	6819      	ldr	r1, [r3, #0]
 80012d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d6:	9309      	str	r3, [sp, #36]	; 0x24
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <fsm_manual+0x2c8>)
 80012da:	9308      	str	r3, [sp, #32]
 80012dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e0:	9307      	str	r3, [sp, #28]
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <fsm_manual+0x2c8>)
 80012e4:	9306      	str	r3, [sp, #24]
 80012e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012ea:	9305      	str	r3, [sp, #20]
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <fsm_manual+0x2c8>)
 80012ee:	9304      	str	r3, [sp, #16]
 80012f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012f4:	9303      	str	r3, [sp, #12]
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <fsm_manual+0x2c8>)
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <fsm_manual+0x2c8>)
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001308:	4a09      	ldr	r2, [pc, #36]	; (8001330 <fsm_manual+0x2c8>)
 800130a:	f7ff fdf9 	bl	8000f00 <case2>
 800130e:	4603      	mov	r3, r0
 8001310:	4a05      	ldr	r2, [pc, #20]	; (8001328 <fsm_manual+0x2c0>)
 8001312:	6013      	str	r3, [r2, #0]
			  LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin,LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin,
			  LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin,LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin,
			  LED_RED_1_GPIO_Port, LED_RED_1_Pin,LED_RED_2_GPIO_Port, LED_RED_2_Pin
		);
		break;
 8001314:	e000      	b.n	8001318 <fsm_manual+0x2b0>
	  break;
 8001316:	bf00      	nop
	}
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200000dc 	.word	0x200000dc
 8001324:	20000080 	.word	0x20000080
 8001328:	2000013c 	.word	0x2000013c
 800132c:	200000e0 	.word	0x200000e0
 8001330:	40010800 	.word	0x40010800

08001334 <turn_Led7SEG>:

#include "fsm_setting.h"

int mode = 0, en0 = 1, en1 = 0, en2 = 1, en3 = 0;

void turn_Led7SEG(){
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin, en0);
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <turn_Led7SEG+0x4c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	4810      	ldr	r0, [pc, #64]	; (8001384 <turn_Led7SEG+0x50>)
 8001344:	f000 fe25 	bl	8001f92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin, en1);
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <turn_Led7SEG+0x54>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	480c      	ldr	r0, [pc, #48]	; (8001384 <turn_Led7SEG+0x50>)
 8001354:	f000 fe1d 	bl	8001f92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin, en2);
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <turn_Led7SEG+0x58>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	461a      	mov	r2, r3
 8001360:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001364:	4807      	ldr	r0, [pc, #28]	; (8001384 <turn_Led7SEG+0x50>)
 8001366:	f000 fe14 	bl	8001f92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin, en3);
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <turn_Led7SEG+0x5c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	461a      	mov	r2, r3
 8001372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001376:	4803      	ldr	r0, [pc, #12]	; (8001384 <turn_Led7SEG+0x50>)
 8001378:	f000 fe0b 	bl	8001f92 <HAL_GPIO_WritePin>
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000090 	.word	0x20000090
 8001384:	40010800 	.word	0x40010800
 8001388:	200000e4 	.word	0x200000e4
 800138c:	20000094 	.word	0x20000094
 8001390:	200000e8 	.word	0x200000e8

08001394 <setup_Led7SEG>:

void setup_Led7SEG(){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	if(timer_flag[2] == 1){
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <setup_Led7SEG+0x74>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d130      	bne.n	8001402 <setup_Led7SEG+0x6e>
		switch(en0){
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <setup_Led7SEG+0x78>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <setup_Led7SEG+0x1a>
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d007      	beq.n	80013bc <setup_Led7SEG+0x28>
 80013ac:	e00d      	b.n	80013ca <setup_Led7SEG+0x36>
		case 0:
			en0 = 1;
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <setup_Led7SEG+0x78>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	601a      	str	r2, [r3, #0]
			en1 = 0;
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <setup_Led7SEG+0x7c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
			break;
 80013ba:	e006      	b.n	80013ca <setup_Led7SEG+0x36>
		case 1:
			en0 = 0;
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <setup_Led7SEG+0x78>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
			en1 = 1;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <setup_Led7SEG+0x7c>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
			break;
 80013c8:	bf00      	nop
		}

		if(mode == 0){
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <setup_Led7SEG+0x80>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d108      	bne.n	80013e4 <setup_Led7SEG+0x50>
			en2 = en0;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <setup_Led7SEG+0x78>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <setup_Led7SEG+0x84>)
 80013d8:	6013      	str	r3, [r2, #0]
			en3 = en1;
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <setup_Led7SEG+0x7c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <setup_Led7SEG+0x88>)
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e005      	b.n	80013f0 <setup_Led7SEG+0x5c>
		}else{
			en2 = 0;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <setup_Led7SEG+0x84>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
			en3 = 1;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <setup_Led7SEG+0x88>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
		}
		random = -random;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <setup_Led7SEG+0x8c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	425b      	negs	r3, r3
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <setup_Led7SEG+0x8c>)
 80013f8:	6013      	str	r3, [r2, #0]
		setTimer(2, 50);
 80013fa:	2132      	movs	r1, #50	; 0x32
 80013fc:	2002      	movs	r0, #2
 80013fe:	f000 f9c3 	bl	8001788 <setTimer>
	}
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000114 	.word	0x20000114
 800140c:	20000090 	.word	0x20000090
 8001410:	200000e4 	.word	0x200000e4
 8001414:	200000e0 	.word	0x200000e0
 8001418:	20000094 	.word	0x20000094
 800141c:	200000e8 	.word	0x200000e8
 8001420:	20000070 	.word	0x20000070

08001424 <fsm_setting>:

void fsm_setting(){
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	turn_Led7SEG();
 8001428:	f7ff ff84 	bl	8001334 <turn_Led7SEG>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <LED_RED_1>:
 *      Author: PC
 */

#include "led_traffic.h"

void LED_RED_1(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800143a:	4808      	ldr	r0, [pc, #32]	; (800145c <LED_RED_1+0x2c>)
 800143c:	f000 fda9 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <LED_RED_1+0x2c>)
 8001448:	f000 fda3 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001452:	4802      	ldr	r0, [pc, #8]	; (800145c <LED_RED_1+0x2c>)
 8001454:	f000 fd9d 	bl	8001f92 <HAL_GPIO_WritePin>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40010800 	.word	0x40010800

08001460 <LED_GREEN_1>:

void LED_GREEN_1(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800146a:	4808      	ldr	r0, [pc, #32]	; (800148c <LED_GREEN_1+0x2c>)
 800146c:	f000 fd91 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <LED_GREEN_1+0x2c>)
 8001478:	f000 fd8b 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001482:	4802      	ldr	r0, [pc, #8]	; (800148c <LED_GREEN_1+0x2c>)
 8001484:	f000 fd85 	bl	8001f92 <HAL_GPIO_WritePin>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40010800 	.word	0x40010800

08001490 <LED_YELLOW_1>:

void LED_YELLOW_1(void){
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED_RED_1_GPIO_Port , LED_RED_1_Pin , GPIO_PIN_RESET );
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800149a:	4808      	ldr	r0, [pc, #32]	; (80014bc <LED_YELLOW_1+0x2c>)
 800149c:	f000 fd79 	bl	8001f92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED_YELLOW_1_GPIO_Port , LED_YELLOW_1_Pin , GPIO_PIN_SET );
 80014a0:	2201      	movs	r2, #1
 80014a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <LED_YELLOW_1+0x2c>)
 80014a8:	f000 fd73 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin ( LED_GREEN_1_GPIO_Port , LED_GREEN_1_Pin , GPIO_PIN_RESET );
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b2:	4802      	ldr	r0, [pc, #8]	; (80014bc <LED_YELLOW_1+0x2c>)
 80014b4:	f000 fd6d 	bl	8001f92 <HAL_GPIO_WritePin>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40010800 	.word	0x40010800

080014c0 <LED_RED_2>:

void LED_RED_2(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ca:	4808      	ldr	r0, [pc, #32]	; (80014ec <LED_RED_2+0x2c>)
 80014cc:	f000 fd61 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <LED_RED_2+0x2c>)
 80014d8:	f000 fd5b 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e2:	4802      	ldr	r0, [pc, #8]	; (80014ec <LED_RED_2+0x2c>)
 80014e4:	f000 fd55 	bl	8001f92 <HAL_GPIO_WritePin>
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40010800 	.word	0x40010800

080014f0 <LED_GREEN_2>:

void LED_GREEN_2(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fa:	4808      	ldr	r0, [pc, #32]	; (800151c <LED_GREEN_2+0x2c>)
 80014fc:	f000 fd49 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <LED_GREEN_2+0x2c>)
 8001508:	f000 fd43 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001512:	4802      	ldr	r0, [pc, #8]	; (800151c <LED_GREEN_2+0x2c>)
 8001514:	f000 fd3d 	bl	8001f92 <HAL_GPIO_WritePin>
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40010800 	.word	0x40010800

08001520 <LED_YELLOW_2>:

void LED_YELLOW_2(void){
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED_RED_2_GPIO_Port , LED_RED_2_Pin , GPIO_PIN_RESET );
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152a:	4808      	ldr	r0, [pc, #32]	; (800154c <LED_YELLOW_2+0x2c>)
 800152c:	f000 fd31 	bl	8001f92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED_YELLOW_2_GPIO_Port , LED_YELLOW_2_Pin , GPIO_PIN_SET );
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <LED_YELLOW_2+0x2c>)
 8001538:	f000 fd2b 	bl	8001f92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin ( LED_GREEN_2_GPIO_Port , LED_GREEN_2_Pin , GPIO_PIN_RESET );
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001542:	4802      	ldr	r0, [pc, #8]	; (800154c <LED_YELLOW_2+0x2c>)
 8001544:	f000 fd25 	bl	8001f92 <HAL_GPIO_WritePin>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40010800 	.word	0x40010800

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001554:	f000 fa1c 	bl	8001990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001558:	f000 f81a 	bl	8001590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 800155c:	f000 f854 	bl	8001608 <MX_TIM2_Init>
  MX_GPIO_Init();
 8001560:	f000 f89e 	bl	80016a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001564:	4809      	ldr	r0, [pc, #36]	; (800158c <main+0x3c>)
 8001566:	f001 f959 	bl	800281c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(0, 1);
 800156a:	2101      	movs	r1, #1
 800156c:	2000      	movs	r0, #0
 800156e:	f000 f90b 	bl	8001788 <setTimer>
  setTimer(1, 1);
 8001572:	2101      	movs	r1, #1
 8001574:	2001      	movs	r0, #1
 8001576:	f000 f907 	bl	8001788 <setTimer>
  setTimer(2, 1);
 800157a:	2101      	movs	r1, #1
 800157c:	2002      	movs	r0, #2
 800157e:	f000 f903 	bl	8001788 <setTimer>

  while (1)
  {

	  fsm_manual();
 8001582:	f7ff fd71 	bl	8001068 <fsm_manual>
	  fsm_setting();
 8001586:	f7ff ff4d 	bl	8001424 <fsm_setting>
  {
 800158a:	e7fa      	b.n	8001582 <main+0x32>
 800158c:	20000140 	.word	0x20000140

08001590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b090      	sub	sp, #64	; 0x40
 8001594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	2228      	movs	r2, #40	; 0x28
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f001 fcec 	bl	8002f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b6:	2301      	movs	r3, #1
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ba:	2310      	movs	r3, #16
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c2:	f107 0318 	add.w	r3, r7, #24
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 fcfc 	bl	8001fc4 <HAL_RCC_OscConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015d2:	f000 f8d3 	bl	800177c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d6:	230f      	movs	r3, #15
 80015d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 ff68 	bl	80024c4 <HAL_RCC_ClockConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015fa:	f000 f8bf 	bl	800177c <Error_Handler>
  }
}
 80015fe:	bf00      	nop
 8001600:	3740      	adds	r7, #64	; 0x40
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	463b      	mov	r3, r7
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <MX_TIM2_Init+0x94>)
 8001626:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MX_TIM2_Init+0x94>)
 800162e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001632:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <MX_TIM2_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <MX_TIM2_Init+0x94>)
 800163c:	2209      	movs	r2, #9
 800163e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <MX_TIM2_Init+0x94>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_TIM2_Init+0x94>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800164c:	4813      	ldr	r0, [pc, #76]	; (800169c <MX_TIM2_Init+0x94>)
 800164e:	f001 f895 	bl	800277c <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001658:	f000 f890 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	4619      	mov	r1, r3
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <MX_TIM2_Init+0x94>)
 800166a:	f001 fa13 	bl	8002a94 <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001674:	f000 f882 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_TIM2_Init+0x94>)
 8001686:	f001 fbeb 	bl	8002e60 <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001690:	f000 f874 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000140 	.word	0x20000140

080016a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <MX_GPIO_Init+0xb8>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a27      	ldr	r2, [pc, #156]	; (8001758 <MX_GPIO_Init+0xb8>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <MX_GPIO_Init+0xb8>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <MX_GPIO_Init+0xb8>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a21      	ldr	r2, [pc, #132]	; (8001758 <MX_GPIO_Init+0xb8>)
 80016d2:	f043 0308 	orr.w	r3, r3, #8
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <MX_GPIO_Init+0xb8>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	603b      	str	r3, [r7, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, a2_Pin|LED_RED_Pin|EN0_Pin|EN1_Pin
 80016e4:	2200      	movs	r2, #0
 80016e6:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80016ea:	481c      	ldr	r0, [pc, #112]	; (800175c <MX_GPIO_Init+0xbc>)
 80016ec:	f000 fc51 	bl	8001f92 <HAL_GPIO_WritePin>
                          |EN2_Pin|EN3_Pin|LED_RED_1_Pin|LED_YELLOW_1_Pin
                          |LED_GREEN_1_Pin|LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d_Pin
 80016f0:	2200      	movs	r2, #0
 80016f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016f6:	481a      	ldr	r0, [pc, #104]	; (8001760 <MX_GPIO_Init+0xc0>)
 80016f8:	f000 fc4b 	bl	8001f92 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin|f2_Pin
                          |g2_Pin|d1_Pin|e1_Pin|f1_Pin
                          |g1_Pin|a_Pin|b_Pin|c_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin Button4_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin|Button4_Pin;
 80016fc:	230f      	movs	r3, #15
 80016fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001704:	2301      	movs	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4619      	mov	r1, r3
 800170e:	4813      	ldr	r0, [pc, #76]	; (800175c <MX_GPIO_Init+0xbc>)
 8001710:	f000 faae 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : a2_Pin LED_RED_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin LED_RED_1_Pin LED_YELLOW_1_Pin
                           LED_GREEN_1_Pin LED_RED_2_Pin LED_YELLOW_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = a2_Pin|LED_RED_Pin|EN0_Pin|EN1_Pin
 8001714:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001718:	60bb      	str	r3, [r7, #8]
                          |EN2_Pin|EN3_Pin|LED_RED_1_Pin|LED_YELLOW_1_Pin
                          |LED_GREEN_1_Pin|LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2302      	movs	r3, #2
 8001724:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	4619      	mov	r1, r3
 800172c:	480b      	ldr	r0, [pc, #44]	; (800175c <MX_GPIO_Init+0xbc>)
 800172e:	f000 fa9f 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin d_Pin
                           e_Pin f_Pin g_Pin f2_Pin
                           g2_Pin d1_Pin e1_Pin f1_Pin
                           g1_Pin a_Pin b_Pin c_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|d_Pin
 8001732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001736:	60bb      	str	r3, [r7, #8]
                          |e_Pin|f_Pin|g_Pin|f2_Pin
                          |g2_Pin|d1_Pin|e1_Pin|f1_Pin
                          |g1_Pin|a_Pin|b_Pin|c_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2302      	movs	r3, #2
 8001742:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4619      	mov	r1, r3
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_GPIO_Init+0xc0>)
 800174c:	f000 fa90 	bl	8001c70 <HAL_GPIO_Init>

}
 8001750:	bf00      	nop
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	40010800 	.word	0x40010800
 8001760:	40010c00 	.word	0x40010c00

08001764 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	timerRun();
 800176c:	f000 f84c 	bl	8001808 <timerRun>
	getKeyInput();
 8001770:	f7ff f90e 	bl	8000990 <getKeyInput>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001784:	e7fe      	b.n	8001784 <Error_Handler+0x8>
	...

08001788 <setTimer>:

#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};
void setTimer(int i, int duration){
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	timer_flag[i] = 0;
 8001792:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <setTimer+0x28>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2100      	movs	r1, #0
 8001798:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[i] = duration;
 800179c:	4905      	ldr	r1, [pc, #20]	; (80017b4 <setTimer+0x2c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	20000114 	.word	0x20000114
 80017b4:	200000ec 	.word	0x200000ec

080017b8 <timer_run>:

void timer_run(int i){
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	if(timer_counter[i] > 0){
 80017c0:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <timer_run+0x48>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	dd13      	ble.n	80017f4 <timer_run+0x3c>
		timer_counter[i]--;
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <timer_run+0x48>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d4:	1e5a      	subs	r2, r3, #1
 80017d6:	490a      	ldr	r1, [pc, #40]	; (8001800 <timer_run+0x48>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] <= 0) timer_flag[i] = 1;
 80017de:	4a08      	ldr	r2, [pc, #32]	; (8001800 <timer_run+0x48>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dc04      	bgt.n	80017f4 <timer_run+0x3c>
 80017ea:	4a06      	ldr	r2, [pc, #24]	; (8001804 <timer_run+0x4c>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2101      	movs	r1, #1
 80017f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	200000ec 	.word	0x200000ec
 8001804:	20000114 	.word	0x20000114

08001808 <timerRun>:

void timerRun(){
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	timer_run(0);
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff ffd3 	bl	80017b8 <timer_run>
	timer_run(1);
 8001812:	2001      	movs	r0, #1
 8001814:	f7ff ffd0 	bl	80017b8 <timer_run>
	timer_run(2);
 8001818:	2002      	movs	r0, #2
 800181a:	f7ff ffcd 	bl	80017b8 <timer_run>
	timer_run(3);
 800181e:	2003      	movs	r0, #3
 8001820:	f7ff ffca 	bl	80017b8 <timer_run>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_MspInit+0x5c>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	4a14      	ldr	r2, [pc, #80]	; (8001884 <HAL_MspInit+0x5c>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6193      	str	r3, [r2, #24]
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_MspInit+0x5c>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <HAL_MspInit+0x5c>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <HAL_MspInit+0x5c>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_MspInit+0x5c>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_MspInit+0x60>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_MspInit+0x60>)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40021000 	.word	0x40021000
 8001888:	40010000 	.word	0x40010000

0800188c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800189c:	d113      	bne.n	80018c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_TIM_Base_MspInit+0x44>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <HAL_TIM_Base_MspInit+0x44>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_TIM_Base_MspInit+0x44>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	201c      	movs	r0, #28
 80018bc:	f000 f9a1 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c0:	201c      	movs	r0, #28
 80018c2:	f000 f9ba 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <NMI_Handler+0x4>

080018da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <MemManage_Handler+0x4>

080018e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191a:	f000 f87f 	bl	8001a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <TIM2_IRQHandler+0x10>)
 800192a:	f000 ffc3 	bl	80028b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000140 	.word	0x20000140

08001938 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001944:	f7ff fff8 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001948:	480b      	ldr	r0, [pc, #44]	; (8001978 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800194a:	490c      	ldr	r1, [pc, #48]	; (800197c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <LoopFillZerobss+0x16>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001960:	4c09      	ldr	r4, [pc, #36]	; (8001988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196e:	f001 fae1 	bl	8002f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001972:	f7ff fded 	bl	8001550 <main>
  bx lr
 8001976:	4770      	bx	lr
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001980:	08002fd0 	.word	0x08002fd0
  ldr r2, =_sbss
 8001984:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001988:	2000018c 	.word	0x2000018c

0800198c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC1_2_IRQHandler>
	...

08001990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_Init+0x28>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <HAL_Init+0x28>)
 800199a:	f043 0310 	orr.w	r3, r3, #16
 800199e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a0:	2003      	movs	r0, #3
 80019a2:	f000 f923 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a6:	200f      	movs	r0, #15
 80019a8:	f000 f808 	bl	80019bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ac:	f7ff ff3c 	bl	8001828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40022000 	.word	0x40022000

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x54>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x58>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f93b 	bl	8001c56 <HAL_SYSTICK_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00e      	b.n	8001a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d80a      	bhi.n	8001a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f000 f903 	bl	8001c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019fc:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <HAL_InitTick+0x5c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000098 	.word	0x20000098
 8001a14:	200000a0 	.word	0x200000a0
 8001a18:	2000009c 	.word	0x2000009c

08001a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_IncTick+0x1c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_IncTick+0x20>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a03      	ldr	r2, [pc, #12]	; (8001a3c <HAL_IncTick+0x20>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	200000a0 	.word	0x200000a0
 8001a3c:	20000188 	.word	0x20000188

08001a40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b02      	ldr	r3, [pc, #8]	; (8001a50 <HAL_GetTick+0x10>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	20000188 	.word	0x20000188

08001a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a70:	4013      	ands	r3, r2
 8001a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	60d3      	str	r3, [r2, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	f003 0307 	and.w	r3, r3, #7
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db0b      	blt.n	8001ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f003 021f 	and.w	r2, r3, #31
 8001ad0:	4906      	ldr	r1, [pc, #24]	; (8001aec <__NVIC_EnableIRQ+0x34>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	2001      	movs	r0, #1
 8001ada:	fa00 f202 	lsl.w	r2, r0, r2
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb8:	d301      	bcc.n	8001bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00f      	b.n	8001bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <SysTick_Config+0x40>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f7ff ff90 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SysTick_Config+0x40>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <SysTick_Config+0x40>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff2d 	bl	8001a54 <__NVIC_SetPriorityGrouping>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c14:	f7ff ff42 	bl	8001a9c <__NVIC_GetPriorityGrouping>
 8001c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	6978      	ldr	r0, [r7, #20]
 8001c20:	f7ff ff90 	bl	8001b44 <NVIC_EncodePriority>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff5f 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff35 	bl	8001ab8 <__NVIC_EnableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffa2 	bl	8001ba8 <SysTick_Config>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b08b      	sub	sp, #44	; 0x2c
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c82:	e148      	b.n	8001f16 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c84:	2201      	movs	r2, #1
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f040 8137 	bne.w	8001f10 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4aa3      	ldr	r2, [pc, #652]	; (8001f34 <HAL_GPIO_Init+0x2c4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d05e      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cac:	4aa1      	ldr	r2, [pc, #644]	; (8001f34 <HAL_GPIO_Init+0x2c4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d875      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cb2:	4aa1      	ldr	r2, [pc, #644]	; (8001f38 <HAL_GPIO_Init+0x2c8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d058      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cb8:	4a9f      	ldr	r2, [pc, #636]	; (8001f38 <HAL_GPIO_Init+0x2c8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d86f      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cbe:	4a9f      	ldr	r2, [pc, #636]	; (8001f3c <HAL_GPIO_Init+0x2cc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d052      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cc4:	4a9d      	ldr	r2, [pc, #628]	; (8001f3c <HAL_GPIO_Init+0x2cc>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d869      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cca:	4a9d      	ldr	r2, [pc, #628]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d04c      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cd0:	4a9b      	ldr	r2, [pc, #620]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d863      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cd6:	4a9b      	ldr	r2, [pc, #620]	; (8001f44 <HAL_GPIO_Init+0x2d4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d046      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cdc:	4a99      	ldr	r2, [pc, #612]	; (8001f44 <HAL_GPIO_Init+0x2d4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d85d      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001ce2:	2b12      	cmp	r3, #18
 8001ce4:	d82a      	bhi.n	8001d3c <HAL_GPIO_Init+0xcc>
 8001ce6:	2b12      	cmp	r3, #18
 8001ce8:	d859      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cea:	a201      	add	r2, pc, #4	; (adr r2, 8001cf0 <HAL_GPIO_Init+0x80>)
 8001cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf0:	08001d6b 	.word	0x08001d6b
 8001cf4:	08001d45 	.word	0x08001d45
 8001cf8:	08001d57 	.word	0x08001d57
 8001cfc:	08001d99 	.word	0x08001d99
 8001d00:	08001d9f 	.word	0x08001d9f
 8001d04:	08001d9f 	.word	0x08001d9f
 8001d08:	08001d9f 	.word	0x08001d9f
 8001d0c:	08001d9f 	.word	0x08001d9f
 8001d10:	08001d9f 	.word	0x08001d9f
 8001d14:	08001d9f 	.word	0x08001d9f
 8001d18:	08001d9f 	.word	0x08001d9f
 8001d1c:	08001d9f 	.word	0x08001d9f
 8001d20:	08001d9f 	.word	0x08001d9f
 8001d24:	08001d9f 	.word	0x08001d9f
 8001d28:	08001d9f 	.word	0x08001d9f
 8001d2c:	08001d9f 	.word	0x08001d9f
 8001d30:	08001d9f 	.word	0x08001d9f
 8001d34:	08001d4d 	.word	0x08001d4d
 8001d38:	08001d61 	.word	0x08001d61
 8001d3c:	4a82      	ldr	r2, [pc, #520]	; (8001f48 <HAL_GPIO_Init+0x2d8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d42:	e02c      	b.n	8001d9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	623b      	str	r3, [r7, #32]
          break;
 8001d4a:	e029      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	3304      	adds	r3, #4
 8001d52:	623b      	str	r3, [r7, #32]
          break;
 8001d54:	e024      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	3308      	adds	r3, #8
 8001d5c:	623b      	str	r3, [r7, #32]
          break;
 8001d5e:	e01f      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	330c      	adds	r3, #12
 8001d66:	623b      	str	r3, [r7, #32]
          break;
 8001d68:	e01a      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d72:	2304      	movs	r3, #4
 8001d74:	623b      	str	r3, [r7, #32]
          break;
 8001d76:	e013      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d80:	2308      	movs	r3, #8
 8001d82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	611a      	str	r2, [r3, #16]
          break;
 8001d8a:	e009      	b.n	8001da0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	615a      	str	r2, [r3, #20]
          break;
 8001d96:	e003      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
          break;
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          break;
 8001d9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2bff      	cmp	r3, #255	; 0xff
 8001da4:	d801      	bhi.n	8001daa <HAL_GPIO_Init+0x13a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	e001      	b.n	8001dae <HAL_GPIO_Init+0x13e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2bff      	cmp	r3, #255	; 0xff
 8001db4:	d802      	bhi.n	8001dbc <HAL_GPIO_Init+0x14c>
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	e002      	b.n	8001dc2 <HAL_GPIO_Init+0x152>
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	3b08      	subs	r3, #8
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	210f      	movs	r1, #15
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	6a39      	ldr	r1, [r7, #32]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8090 	beq.w	8001f10 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001df0:	4b56      	ldr	r3, [pc, #344]	; (8001f4c <HAL_GPIO_Init+0x2dc>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	4a55      	ldr	r2, [pc, #340]	; (8001f4c <HAL_GPIO_Init+0x2dc>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6193      	str	r3, [r2, #24]
 8001dfc:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_GPIO_Init+0x2dc>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e08:	4a51      	ldr	r2, [pc, #324]	; (8001f50 <HAL_GPIO_Init+0x2e0>)
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a49      	ldr	r2, [pc, #292]	; (8001f54 <HAL_GPIO_Init+0x2e4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d00d      	beq.n	8001e50 <HAL_GPIO_Init+0x1e0>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a48      	ldr	r2, [pc, #288]	; (8001f58 <HAL_GPIO_Init+0x2e8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d007      	beq.n	8001e4c <HAL_GPIO_Init+0x1dc>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a47      	ldr	r2, [pc, #284]	; (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d101      	bne.n	8001e48 <HAL_GPIO_Init+0x1d8>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e004      	b.n	8001e52 <HAL_GPIO_Init+0x1e2>
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e002      	b.n	8001e52 <HAL_GPIO_Init+0x1e2>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_GPIO_Init+0x1e2>
 8001e50:	2300      	movs	r3, #0
 8001e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e54:	f002 0203 	and.w	r2, r2, #3
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	4093      	lsls	r3, r2
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e62:	493b      	ldr	r1, [pc, #236]	; (8001f50 <HAL_GPIO_Init+0x2e0>)
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	3302      	adds	r3, #2
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d006      	beq.n	8001e8a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e7c:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	4937      	ldr	r1, [pc, #220]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]
 8001e88:	e006      	b.n	8001e98 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e8a:	4b35      	ldr	r3, [pc, #212]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	4933      	ldr	r1, [pc, #204]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	492d      	ldr	r1, [pc, #180]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60cb      	str	r3, [r1, #12]
 8001eb0:	e006      	b.n	8001ec0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eb2:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	4929      	ldr	r1, [pc, #164]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d006      	beq.n	8001eda <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ecc:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4923      	ldr	r1, [pc, #140]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	491f      	ldr	r1, [pc, #124]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d006      	beq.n	8001f02 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4919      	ldr	r1, [pc, #100]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4915      	ldr	r1, [pc, #84]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	3301      	adds	r3, #1
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f47f aeaf 	bne.w	8001c84 <HAL_GPIO_Init+0x14>
  }
}
 8001f26:	bf00      	nop
 8001f28:	bf00      	nop
 8001f2a:	372c      	adds	r7, #44	; 0x2c
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	10320000 	.word	0x10320000
 8001f38:	10310000 	.word	0x10310000
 8001f3c:	10220000 	.word	0x10220000
 8001f40:	10210000 	.word	0x10210000
 8001f44:	10120000 	.word	0x10120000
 8001f48:	10110000 	.word	0x10110000
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40010800 	.word	0x40010800
 8001f58:	40010c00 	.word	0x40010c00
 8001f5c:	40011000 	.word	0x40011000
 8001f60:	40010400 	.word	0x40010400

08001f64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	887b      	ldrh	r3, [r7, #2]
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	e001      	b.n	8001f86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	807b      	strh	r3, [r7, #2]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa2:	787b      	ldrb	r3, [r7, #1]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa8:	887a      	ldrh	r2, [r7, #2]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fae:	e003      	b.n	8001fb8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	041a      	lsls	r2, r3, #16
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	611a      	str	r2, [r3, #16]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e26c      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8087 	beq.w	80020f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe4:	4b92      	ldr	r3, [pc, #584]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d00c      	beq.n	800200a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff0:	4b8f      	ldr	r3, [pc, #572]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d112      	bne.n	8002022 <HAL_RCC_OscConfig+0x5e>
 8001ffc:	4b8c      	ldr	r3, [pc, #560]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002008:	d10b      	bne.n	8002022 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200a:	4b89      	ldr	r3, [pc, #548]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d06c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x12c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d168      	bne.n	80020f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e246      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x76>
 800202c:	4b80      	ldr	r3, [pc, #512]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a7f      	ldr	r2, [pc, #508]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e02e      	b.n	8002098 <HAL_RCC_OscConfig+0xd4>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x98>
 8002042:	4b7b      	ldr	r3, [pc, #492]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a7a      	ldr	r2, [pc, #488]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b78      	ldr	r3, [pc, #480]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a77      	ldr	r2, [pc, #476]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e01d      	b.n	8002098 <HAL_RCC_OscConfig+0xd4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0xbc>
 8002066:	4b72      	ldr	r3, [pc, #456]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a71      	ldr	r2, [pc, #452]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b6f      	ldr	r3, [pc, #444]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6e      	ldr	r2, [pc, #440]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0xd4>
 8002080:	4b6b      	ldr	r3, [pc, #428]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a6a      	ldr	r2, [pc, #424]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b68      	ldr	r3, [pc, #416]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a67      	ldr	r2, [pc, #412]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002096:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7ff fcce 	bl	8001a40 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a8:	f7ff fcca 	bl	8001a40 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1fa      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0xe4>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff fcba 	bl	8001a40 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff fcb6 	bl	8001a40 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1e6      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x10c>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d063      	beq.n	80021c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020fe:	4b4c      	ldr	r3, [pc, #304]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800210a:	4b49      	ldr	r3, [pc, #292]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b08      	cmp	r3, #8
 8002114:	d11c      	bne.n	8002150 <HAL_RCC_OscConfig+0x18c>
 8002116:	4b46      	ldr	r3, [pc, #280]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d116      	bne.n	8002150 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	4b43      	ldr	r3, [pc, #268]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_RCC_OscConfig+0x176>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e1ba      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	4b3d      	ldr	r3, [pc, #244]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4939      	ldr	r1, [pc, #228]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	e03a      	b.n	80021c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002158:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7ff fc6f 	bl	8001a40 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002166:	f7ff fc6b 	bl	8001a40 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e19b      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002184:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4927      	ldr	r1, [pc, #156]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
 8002198:	e015      	b.n	80021c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219a:	4b26      	ldr	r3, [pc, #152]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7ff fc4e 	bl	8001a40 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a8:	f7ff fc4a 	bl	8001a40 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e17a      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d03a      	beq.n	8002248 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d019      	beq.n	800220e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021da:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_RCC_OscConfig+0x274>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e0:	f7ff fc2e 	bl	8001a40 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e8:	f7ff fc2a 	bl	8001a40 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e15a      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002206:	2001      	movs	r0, #1
 8002208:	f000 fa9a 	bl	8002740 <RCC_Delay>
 800220c:	e01c      	b.n	8002248 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_RCC_OscConfig+0x274>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002214:	f7ff fc14 	bl	8001a40 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221a:	e00f      	b.n	800223c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221c:	f7ff fc10 	bl	8001a40 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d908      	bls.n	800223c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e140      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	42420000 	.word	0x42420000
 8002238:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	4b9e      	ldr	r3, [pc, #632]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1e9      	bne.n	800221c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a6 	beq.w	80023a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225a:	4b97      	ldr	r3, [pc, #604]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10d      	bne.n	8002282 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	4b94      	ldr	r3, [pc, #592]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4a93      	ldr	r2, [pc, #588]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002270:	61d3      	str	r3, [r2, #28]
 8002272:	4b91      	ldr	r3, [pc, #580]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227e:	2301      	movs	r3, #1
 8002280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002282:	4b8e      	ldr	r3, [pc, #568]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d118      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228e:	4b8b      	ldr	r3, [pc, #556]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a8a      	ldr	r2, [pc, #552]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229a:	f7ff fbd1 	bl	8001a40 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a2:	f7ff fbcd 	bl	8001a40 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	; 0x64
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0fd      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d106      	bne.n	80022d6 <HAL_RCC_OscConfig+0x312>
 80022c8:	4b7b      	ldr	r3, [pc, #492]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4a7a      	ldr	r2, [pc, #488]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6213      	str	r3, [r2, #32]
 80022d4:	e02d      	b.n	8002332 <HAL_RCC_OscConfig+0x36e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x334>
 80022de:	4b76      	ldr	r3, [pc, #472]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a75      	ldr	r2, [pc, #468]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6213      	str	r3, [r2, #32]
 80022ea:	4b73      	ldr	r3, [pc, #460]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a72      	ldr	r2, [pc, #456]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	e01c      	b.n	8002332 <HAL_RCC_OscConfig+0x36e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d10c      	bne.n	800231a <HAL_RCC_OscConfig+0x356>
 8002300:	4b6d      	ldr	r3, [pc, #436]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4a6c      	ldr	r2, [pc, #432]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6213      	str	r3, [r2, #32]
 800230c:	4b6a      	ldr	r3, [pc, #424]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a69      	ldr	r2, [pc, #420]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e00b      	b.n	8002332 <HAL_RCC_OscConfig+0x36e>
 800231a:	4b67      	ldr	r3, [pc, #412]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4a66      	ldr	r2, [pc, #408]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6213      	str	r3, [r2, #32]
 8002326:	4b64      	ldr	r3, [pc, #400]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a63      	ldr	r2, [pc, #396]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	f023 0304 	bic.w	r3, r3, #4
 8002330:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d015      	beq.n	8002366 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7ff fb81 	bl	8001a40 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7ff fb7d 	bl	8001a40 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0ab      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	4b57      	ldr	r3, [pc, #348]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ee      	beq.n	8002342 <HAL_RCC_OscConfig+0x37e>
 8002364:	e014      	b.n	8002390 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7ff fb6b 	bl	8001a40 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7ff fb67 	bl	8001a40 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	; 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e095      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002384:	4b4c      	ldr	r3, [pc, #304]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ee      	bne.n	800236e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002396:	4b48      	ldr	r3, [pc, #288]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a47      	ldr	r2, [pc, #284]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800239c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8081 	beq.w	80024ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ac:	4b42      	ldr	r3, [pc, #264]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d061      	beq.n	800247c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d146      	bne.n	800244e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c0:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <HAL_RCC_OscConfig+0x4fc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7ff fb3b 	bl	8001a40 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7ff fb37 	bl	8001a40 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e067      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e0:	4b35      	ldr	r3, [pc, #212]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f4:	d108      	bne.n	8002408 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023f6:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	492d      	ldr	r1, [pc, #180]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a19      	ldr	r1, [r3, #32]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	430b      	orrs	r3, r1
 800241a:	4927      	ldr	r1, [pc, #156]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <HAL_RCC_OscConfig+0x4fc>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7ff fb0b 	bl	8001a40 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242e:	f7ff fb07 	bl	8001a40 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e037      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002440:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x46a>
 800244c:	e02f      	b.n	80024ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <HAL_RCC_OscConfig+0x4fc>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff faf4 	bl	8001a40 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245c:	f7ff faf0 	bl	8001a40 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e020      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246e:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x498>
 800247a:	e018      	b.n	80024ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e013      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	429a      	cmp	r2, r3
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40007000 	.word	0x40007000
 80024c0:	42420060 	.word	0x42420060

080024c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0d0      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d910      	bls.n	8002508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b67      	ldr	r3, [pc, #412]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 0207 	bic.w	r2, r3, #7
 80024ee:	4965      	ldr	r1, [pc, #404]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b63      	ldr	r3, [pc, #396]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0b8      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002520:	4b59      	ldr	r3, [pc, #356]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4a58      	ldr	r2, [pc, #352]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800252a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002538:	4b53      	ldr	r3, [pc, #332]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a52      	ldr	r2, [pc, #328]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002542:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002544:	4b50      	ldr	r3, [pc, #320]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	494d      	ldr	r1, [pc, #308]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d040      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d115      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e07f      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002582:	4b41      	ldr	r3, [pc, #260]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e073      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e06b      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a2:	4b39      	ldr	r3, [pc, #228]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4936      	ldr	r1, [pc, #216]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b4:	f7ff fa44 	bl	8001a40 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7ff fa40 	bl	8001a40 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e053      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 020c 	and.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1eb      	bne.n	80025bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d210      	bcs.n	8002614 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4922      	ldr	r1, [pc, #136]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e032      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4916      	ldr	r1, [pc, #88]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	490e      	ldr	r1, [pc, #56]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002652:	f000 f821 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8002656:	4602      	mov	r2, r0
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	490a      	ldr	r1, [pc, #40]	; (800268c <HAL_RCC_ClockConfig+0x1c8>)
 8002664:	5ccb      	ldrb	r3, [r1, r3]
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <HAL_RCC_ClockConfig+0x1cc>)
 800266c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCC_ClockConfig+0x1d0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff f9a2 	bl	80019bc <HAL_InitTick>

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40022000 	.word	0x40022000
 8002688:	40021000 	.word	0x40021000
 800268c:	08002fa4 	.word	0x08002fa4
 8002690:	20000098 	.word	0x20000098
 8002694:	2000009c 	.word	0x2000009c

08002698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <HAL_RCC_GetSysClockFreq+0x94>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d002      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x30>
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x36>
 80026c6:	e027      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ca:	613b      	str	r3, [r7, #16]
      break;
 80026cc:	e027      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	0c9b      	lsrs	r3, r3, #18
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	4a17      	ldr	r2, [pc, #92]	; (8002734 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026d8:	5cd3      	ldrb	r3, [r2, r3]
 80026da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d010      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_RCC_GetSysClockFreq+0x94>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	0c5b      	lsrs	r3, r3, #17
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	4a11      	ldr	r2, [pc, #68]	; (8002738 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a0d      	ldr	r2, [pc, #52]	; (8002730 <HAL_RCC_GetSysClockFreq+0x98>)
 80026fa:	fb02 f203 	mul.w	r2, r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	e004      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a0c      	ldr	r2, [pc, #48]	; (800273c <HAL_RCC_GetSysClockFreq+0xa4>)
 800270c:	fb02 f303 	mul.w	r3, r2, r3
 8002710:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	613b      	str	r3, [r7, #16]
      break;
 8002716:	e002      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_GetSysClockFreq+0x98>)
 800271a:	613b      	str	r3, [r7, #16]
      break;
 800271c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800271e:	693b      	ldr	r3, [r7, #16]
}
 8002720:	4618      	mov	r0, r3
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	007a1200 	.word	0x007a1200
 8002734:	08002fb4 	.word	0x08002fb4
 8002738:	08002fc4 	.word	0x08002fc4
 800273c:	003d0900 	.word	0x003d0900

08002740 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <RCC_Delay+0x34>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <RCC_Delay+0x38>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0a5b      	lsrs	r3, r3, #9
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800275c:	bf00      	nop
  }
  while (Delay --);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1e5a      	subs	r2, r3, #1
 8002762:	60fa      	str	r2, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f9      	bne.n	800275c <RCC_Delay+0x1c>
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	20000098 	.word	0x20000098
 8002778:	10624dd3 	.word	0x10624dd3

0800277c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e041      	b.n	8002812 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff f872 	bl	800188c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f000 fa56 	bl	8002c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d001      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e035      	b.n	80028a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a16      	ldr	r2, [pc, #88]	; (80028ac <HAL_TIM_Base_Start_IT+0x90>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_TIM_Base_Start_IT+0x4e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285e:	d004      	beq.n	800286a <HAL_TIM_Base_Start_IT+0x4e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <HAL_TIM_Base_Start_IT+0x94>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d111      	bne.n	800288e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b06      	cmp	r3, #6
 800287a:	d010      	beq.n	800289e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288c:	e007      	b.n	800289e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40000400 	.word	0x40000400

080028b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d020      	beq.n	8002918 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01b      	beq.n	8002918 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0202 	mvn.w	r2, #2
 80028e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f998 	bl	8002c34 <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f98b 	bl	8002c22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f99a 	bl	8002c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d020      	beq.n	8002964 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01b      	beq.n	8002964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0204 	mvn.w	r2, #4
 8002934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f972 	bl	8002c34 <HAL_TIM_IC_CaptureCallback>
 8002950:	e005      	b.n	800295e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f965 	bl	8002c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f974 	bl	8002c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d020      	beq.n	80029b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01b      	beq.n	80029b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0208 	mvn.w	r2, #8
 8002980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2204      	movs	r2, #4
 8002986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f94c 	bl	8002c34 <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f93f 	bl	8002c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f94e 	bl	8002c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d020      	beq.n	80029fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01b      	beq.n	80029fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0210 	mvn.w	r2, #16
 80029cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2208      	movs	r2, #8
 80029d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f926 	bl	8002c34 <HAL_TIM_IC_CaptureCallback>
 80029e8:	e005      	b.n	80029f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f919 	bl	8002c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f928 	bl	8002c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00c      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0201 	mvn.w	r2, #1
 8002a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fe fea2 	bl	8001764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fa6f 	bl	8002f22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00c      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f8f8 	bl	8002c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00c      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0220 	mvn.w	r2, #32
 8002a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fa42 	bl	8002f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e0b4      	b.n	8002c1a <HAL_TIM_ConfigClockSource+0x186>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae8:	d03e      	beq.n	8002b68 <HAL_TIM_ConfigClockSource+0xd4>
 8002aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aee:	f200 8087 	bhi.w	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af6:	f000 8086 	beq.w	8002c06 <HAL_TIM_ConfigClockSource+0x172>
 8002afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afe:	d87f      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b00:	2b70      	cmp	r3, #112	; 0x70
 8002b02:	d01a      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0xa6>
 8002b04:	2b70      	cmp	r3, #112	; 0x70
 8002b06:	d87b      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b08:	2b60      	cmp	r3, #96	; 0x60
 8002b0a:	d050      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x11a>
 8002b0c:	2b60      	cmp	r3, #96	; 0x60
 8002b0e:	d877      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b50      	cmp	r3, #80	; 0x50
 8002b12:	d03c      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0xfa>
 8002b14:	2b50      	cmp	r3, #80	; 0x50
 8002b16:	d873      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	2b40      	cmp	r3, #64	; 0x40
 8002b1a:	d058      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x13a>
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d86f      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	2b30      	cmp	r3, #48	; 0x30
 8002b22:	d064      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15a>
 8002b24:	2b30      	cmp	r3, #48	; 0x30
 8002b26:	d86b      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d060      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15a>
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d867      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d05c      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15a>
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d05a      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15a>
 8002b38:	e062      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6899      	ldr	r1, [r3, #8]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f000 f96a 	bl	8002e22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	609a      	str	r2, [r3, #8]
      break;
 8002b66:	e04f      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6899      	ldr	r1, [r3, #8]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f000 f953 	bl	8002e22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b8a:	609a      	str	r2, [r3, #8]
      break;
 8002b8c:	e03c      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6859      	ldr	r1, [r3, #4]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f000 f8ca 	bl	8002d34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2150      	movs	r1, #80	; 0x50
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f921 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 8002bac:	e02c      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f000 f8e8 	bl	8002d90 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2160      	movs	r1, #96	; 0x60
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 f911 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 8002bcc:	e01c      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f000 f8aa 	bl	8002d34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2140      	movs	r1, #64	; 0x40
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 f901 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 8002bec:	e00c      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f000 f8f8 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 8002bfe:	e003      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      break;
 8002c04:	e000      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
	...

08002c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a2b      	ldr	r2, [pc, #172]	; (8002d2c <TIM_Base_SetConfig+0xc0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d007      	beq.n	8002c94 <TIM_Base_SetConfig+0x28>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8a:	d003      	beq.n	8002c94 <TIM_Base_SetConfig+0x28>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a28      	ldr	r2, [pc, #160]	; (8002d30 <TIM_Base_SetConfig+0xc4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d108      	bne.n	8002ca6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a20      	ldr	r2, [pc, #128]	; (8002d2c <TIM_Base_SetConfig+0xc0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <TIM_Base_SetConfig+0x52>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb4:	d003      	beq.n	8002cbe <TIM_Base_SetConfig+0x52>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a1d      	ldr	r2, [pc, #116]	; (8002d30 <TIM_Base_SetConfig+0xc4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d108      	bne.n	8002cd0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <TIM_Base_SetConfig+0xc0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d103      	bne.n	8002d04 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f023 0201 	bic.w	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	611a      	str	r2, [r3, #16]
  }
}
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	40012c00 	.word	0x40012c00
 8002d30:	40000400 	.word	0x40000400

08002d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f023 0201 	bic.w	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f023 030a 	bic.w	r3, r3, #10
 8002d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	621a      	str	r2, [r3, #32]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f023 0210 	bic.w	r2, r3, #16
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	031b      	lsls	r3, r3, #12
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	621a      	str	r2, [r3, #32]
}
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f043 0307 	orr.w	r3, r3, #7
 8002e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	609a      	str	r2, [r3, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b087      	sub	sp, #28
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	021a      	lsls	r2, r3, #8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	609a      	str	r2, [r3, #8]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e041      	b.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d009      	beq.n	8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec4:	d004      	beq.n	8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a10      	ldr	r2, [pc, #64]	; (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d10c      	bne.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40012c00 	.word	0x40012c00
 8002f0c:	40000400 	.word	0x40000400

08002f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <__libc_init_array>:
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	2600      	movs	r6, #0
 8002f38:	4d0c      	ldr	r5, [pc, #48]	; (8002f6c <__libc_init_array+0x38>)
 8002f3a:	4c0d      	ldr	r4, [pc, #52]	; (8002f70 <__libc_init_array+0x3c>)
 8002f3c:	1b64      	subs	r4, r4, r5
 8002f3e:	10a4      	asrs	r4, r4, #2
 8002f40:	42a6      	cmp	r6, r4
 8002f42:	d109      	bne.n	8002f58 <__libc_init_array+0x24>
 8002f44:	f000 f822 	bl	8002f8c <_init>
 8002f48:	2600      	movs	r6, #0
 8002f4a:	4d0a      	ldr	r5, [pc, #40]	; (8002f74 <__libc_init_array+0x40>)
 8002f4c:	4c0a      	ldr	r4, [pc, #40]	; (8002f78 <__libc_init_array+0x44>)
 8002f4e:	1b64      	subs	r4, r4, r5
 8002f50:	10a4      	asrs	r4, r4, #2
 8002f52:	42a6      	cmp	r6, r4
 8002f54:	d105      	bne.n	8002f62 <__libc_init_array+0x2e>
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
 8002f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f5c:	4798      	blx	r3
 8002f5e:	3601      	adds	r6, #1
 8002f60:	e7ee      	b.n	8002f40 <__libc_init_array+0xc>
 8002f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f66:	4798      	blx	r3
 8002f68:	3601      	adds	r6, #1
 8002f6a:	e7f2      	b.n	8002f52 <__libc_init_array+0x1e>
 8002f6c:	08002fc8 	.word	0x08002fc8
 8002f70:	08002fc8 	.word	0x08002fc8
 8002f74:	08002fc8 	.word	0x08002fc8
 8002f78:	08002fcc 	.word	0x08002fcc

08002f7c <memset>:
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4402      	add	r2, r0
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d100      	bne.n	8002f86 <memset+0xa>
 8002f84:	4770      	bx	lr
 8002f86:	f803 1b01 	strb.w	r1, [r3], #1
 8002f8a:	e7f9      	b.n	8002f80 <memset+0x4>

08002f8c <_init>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	bf00      	nop
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr

08002f98 <_fini>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	bf00      	nop
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr
